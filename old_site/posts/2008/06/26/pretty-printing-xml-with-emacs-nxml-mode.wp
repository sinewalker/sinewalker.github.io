<html><body><p>Did you ever get a stream of XML out of a log file, or in a data stream, and it's all mashed together without line-breaks so that it just appears as gobble-de-gook? If there's a data error (not an XML parsing error) then you have to read it so that you can find where the error is, but you don't have XML-spy and NetBeans is overkill or takes forever to fire up...


Emacs to the rescue! <a title="Benjamin Ferrari's blog (seems to lack an " href="http://blog.bookworm.at/">Benjamin Ferrari</a> wrote this <em>increadibly useful</em> (and simple) <a title="Benjamin Ferrari's original blog post for below code" href="http://blog.bookworm.at/2007/03/pretty-print-xml-with-emacs.html">elisp function</a> to pretty-print a block of XML code:

</p><pre><!-- TEASER_END -->(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
<a title="NXML-mode home-page" href="http://www.emacswiki.org/cgi-bin/wiki/NxmlMode">http://www.emacswiki.org/cgi-bin/wiki/NxmlMode</a> installed to do

this.  The function inserts linebreaks to separate tags that have

nothing but whitespace between them.  It then indents the markup

by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\&gt;[ \\t]*\&lt;" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end))
    (message "Ah, much better!"))</pre>
Indeed, why isn't this included with NXML-mode?Â  Ah well, at least my problem's solved for the simple use-case of opening a machine-generated XML file and wanting to visually parse it...



Benjamin's blog has lots of useful Emacs stuff. <a title="Benjamin's intro essay to his emacs hacks, and why anyone might care" href="http://blog.bookworm.at/2007/03/introduction-to-all-these-emacs.html">Worth a read</a>.</body></html>
