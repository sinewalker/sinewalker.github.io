<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Milosophical Me (cygwin)</title><link>http://milosophical.me/</link><description></description><language>en</language><lastBuildDate>Fri, 23 Jan 2015 22:36:08 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Trouble with the New X11 server in Cygwin</title><link>http://milosophical.me/blog/2008/11/26/new-x11-server-in-cygwin.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I recently upgraded my Cygwin install and noticed that Cygwin has switched it's X server &lt;code&gt;XWin.exe&lt;/code&gt; from the XFree86 codebase to the Xorg codebase. Besides an updated logo, it also has some other side-effects.


&lt;!--more--&gt;The first one I noticed is that the xterm now has a menu turned on by default. If this annoys you (like it did me), you can turn it off by adding the following to your &lt;code&gt;~/.Xdefaults&lt;/code&gt;:

&lt;/p&gt;&lt;p style="text-align:center;"&gt;&lt;code&gt;&lt;strong&gt;XTerm*toolBar: off&lt;/strong&gt;&lt;/code&gt;&lt;/p&gt;



The next side-effect I haven't yet solved. I &lt;a title="how to set up cygwin's xwin menu" href="http://sinewalker.wordpress.com/2006/04/18/cygwin-systray-menu/"&gt;use the XWin menu&lt;/a&gt; to define some links to the servers I look after at work. I use &lt;code&gt;plink.exe&lt;/code&gt; (part of &lt;a title="PuTTY home page" href="http://www.chiark.greenend.org.uk/~sgtatham/putty/"&gt;PuTTY&lt;/a&gt;) to launch an xterm on the remote host, displayed locally, and using &lt;code&gt;pagent.exe&lt;/code&gt; to do the authentication. For example:

&lt;pre&gt;&lt;code&gt;&lt;strong&gt;MENU DEV_SERVERS {
    "Content Server" exec "D:/Programs/PuTTY/plink.exe -ssh -X -C -load someserverdef /usr/openwin/bin/xterm -name greenbackground -ls"
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;

...



This used to work, but now nothing happens.  Interestingly, the command &lt;em&gt;will &lt;/em&gt;work if you execute it directly from a bash shell. If anyone has an idea, I'd be grateful for their help :)

&lt;h5&gt;UPDATE: - 20081217 -- Use Xming, maybe&lt;/h5&gt;

I haven't yet figured out ssh-agent. However one work-around that I tried earlier and added in the comments was no good: the X clients started in a terminal that is forked off this way don't come through for some reason, to do with the way the X packets are tunnelled I think. So, I was motivated to try &lt;a title="Xming web site" href="http://www.straightrunning.com/XmingNotes/"&gt;Xming&lt;/a&gt;.



Xming is being used quite successfully by my work colleagues who don't have a whole Cygwin stack on their machines. It's a lightweight X11 server for Windows, and it even uses Microsoft's OpenGL apparently. I'll have to try out some 3D clients from home soon to see what that gets me, but it could be good.



Anyway, for work, it seems to integrate very well with PuTTY. There's even a stand-alone putty you can &lt;a title="Xming sourceforge" href="http://sourceforge.net/projects/xming"&gt;download&lt;/a&gt; that's pre-integrated, though it seems to also require the Xming server.



I also found that it'll serve my local X clients quite well. The most important of these is my emacs, of course. For that to work well, I had to download the extra fonts since emacs uses servers-side fonts. But it works and is indistinguishable from the X11 server that's built into Cygwin.



I haven't yet un-installed Cygwin's X server: I fear it could also remove clients and libraries, and I don't want the hastle just now of figuring that out.



A final note: It's menu config file is Xmingrc (no dot), which lives in Window's HOME %USERPROFILE%. Also, because it's got no Cygwin dependency, you can't launch local Cygwin X clients from this menu. At least, not without wrapping them in calls to Cygwin's run.exe, e.g.

&lt;p style="text-align:center;"&gt;&lt;code&gt;d:\cygwin\bin\run.exe -p /usr/X11R6/bin emacs -display 127.0.0.1:0.0 --debug-init&lt;/code&gt;&lt;/p&gt;</description><category>cygwin</category><category>hacking</category><category>help</category><category>problem</category><category>tip</category><category>x11</category><category>xming</category><category>xorg</category><guid>http://milosophical.me/blog/2008/11/26/new-x11-server-in-cygwin.html</guid><pubDate>Tue, 25 Nov 2008 23:07:34 GMT</pubDate></item><item><title>Stripping tags from ogg Vorbis files</title><link>http://milosophical.me/blog/2008/08/26/stripping-tags-from-ogg-vorbis-files.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I have a bunch of free &lt;a title="Xiph's meta container format for media" href="http://www.xiph.org/ogg/"&gt;Ogg&lt;/a&gt; &lt;a title="Patent-free audio codec (MP3 killer)" href="http://www.vorbis.com/"&gt;Vorbis&lt;/a&gt; audio files that I've downloaded from &lt;a title="Kahvi Collective. Sound has the power to make the world a better place" href="http://kahvi.org/"&gt;Kahvi.org&lt;/a&gt;. They're great! But recently they've been including cover art within the files, which breaks Windows Media Player (it can't handle the very long tags of binhex-coded JPGs).


Since I rather like WMP's integration in windows (keyboard shortcuts), and &lt;a title="Kewl KDE music player (iTunes killer)" href="http://amarok.kde.org/"&gt;Amarok&lt;/a&gt; &lt;a title="Amarok for win32 is still a work in progress, but it compiles..." href="http://amarok.kde.org/wiki/Development/Win32"&gt;isn't quite ready for win32&lt;/a&gt;, I thought I'd find a way to strip the troublesome tags from the data files rather than change to another player.



Here's a quick-and-dirty shell hack to remove the tags from the files and get them playable by daft players such as Windows Media Player



&lt;!--more--&gt;

&lt;/p&gt;&lt;pre&gt;#!/bin/bash

###############################################################################

#

#   File:       fixvorbis.sh

#   Language:   Bash shell script

#   Time-stamp: &amp;lt;2008-08-26 15:48:45 tzbblg&amp;gt;

#   Platform:   N/A (requirest ogg Vorbis tools installed)

#   OS:         *nix

#   Authors:    Michael Lockhart [MJL]

#

#   Rights:     Copyright © 2008 Michael James Lockhart, B.App.Comp(HONS)

#

#     This program is free software: you can redistribute it and/or

#     modify it under the terms of th e GNU General Public License as

#     published by the Free Software Foundation, either version 3 of the

#     License, or (at your option) any later version.

#

#     This program is distributed in the hope that it will be useful,

#     but WITHOUT ANY WARRANTY; without even the implied warranty of

#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

#     GNU General Public License for more details.

#

#     You should have received a copy of the GNU General Public License

#     along with this program.  If not, see .

#

#   PURPOSE:

#

#     Script to strip out COVERART tags from ogg vorbis files (these

#     tags break certain players...)

#

#   HISTORY:

#

#   MJL20080826 - Created.

#



# extract the comments, less the COVERART tags

# (keep the art in separate files)



for n in *.ogg; do
    echo "Extracting comments and COVERART from $n"
    vorbiscomment -l $n | grep COVERART &amp;gt; $n-art.txt
    vorbiscomment -l $n | grep -v COVERART &amp;gt; $n-comment.txt
done



#if there's a comments patch (stored in patch.txt in the current dir)

# then apply the patch to the comments.

if [ -f patch.txt ]; then
    for n in *-comment.txt; do
	patch $n patch.txt
    done
fi



# edit the comments with new comment files, minus art, possibly patched.

for n in *.ogg; do
    echo "Replacing comments in $n"
    vorbiscomment -c $n-comment.txt -w $n
done



#clean up

rm *-comment.txt



# clean-up of art is manual. There might be different cover-art from

# each file, but if not (diff a*-art.txt b*.txt etc produces no

# output) then just remove all but first and rename it...&lt;/pre&gt;

&lt;hr&gt;The smarts are all in the vorbis utilites included as part of Cygwin. Specifically the script uses vorbiscomment&lt;sub&gt;(1)&lt;/sub&gt; to extract and apply tags in the Ogg files, and grep and (optionally) patch to manipulate the comments.



Enjoy!



P.S. My Wordpress stylesheet is doing weird things with the margins and this is really badly formatted, sorry. You can copy/paste into a text editor just fine though...</description><category>audio</category><category>code</category><category>cygwin</category><category>hacking</category><category>tip</category><category>vorbis</category><guid>http://milosophical.me/blog/2008/08/26/stripping-tags-from-ogg-vorbis-files.html</guid><pubDate>Tue, 26 Aug 2008 06:05:34 GMT</pubDate></item><item><title>Cygwin and Emacs 22</title><link>http://milosophical.me/blog/2008/04/04/cygwin-and-emacs-22.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;a title="GNU Emacs home page" href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; long-awaited version 22.1 was released on 2007-07-02, and a package for Cygwin was available a few months later. The Cygwin package is still experimental, so Cygwin's setup program will select 21 by default.


&lt;!--more--&gt;I've been hanging out for the new features of 22, happily use it in Linux daily and want to also use it in my Cygwin. It's pretty simple to get it working in Cygwin (it's installable from setup.exe), but since it's an experimental package, you need to take notice of the version of emacs you're installing and make sure you cycle through the install versions and pick 22.1-&lt;em&gt;x&lt;/em&gt; for these packages:

&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;emacs&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;emacs-X11&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;emacs-el&lt;/strong&gt; (you will need to install this, even if you're not interested in the elisp code, because the pre-compiled lisp code for Cygwin has some errors that cause the .elc to not load properly :( )&lt;/li&gt;
&lt;/ul&gt;

&lt;strong&gt;There's also an important gotcha&lt;/strong&gt;:  &lt;span style="text-decoration:underline;"&gt;&lt;strong&gt;every&lt;/strong&gt;&lt;/span&gt; time you run setup.exe to install/remove Cygwin packages, you need to make sure that these three emacs ones are cycled to "Keep" version 22! Otherwise you'll be unpleasantly surprised that emacs 21 is installed...



Also: version 22 seems rather unstable for cygwin. It frequently crashes on my employer's WinXP SP2 platform. I'm not sure why, usually it happens in comint modes (like shell mode, for instance) but it can just crash mid-way through lisp operations also. This is annoying, but not critical (unless you're in the middle of a vi/emacs war with colleagues). My advice: make sure autosave is turned on, and make use of &lt;code&gt;M-x recover-session&lt;/code&gt;.



The Free Software Foundation &lt;a title="GNU Emacs 22.2 NEWS file" href="http://www.gnu.org/software/emacs/NEWS.22.2"&gt;announced&lt;/a&gt; on 2008-03-26 that version 22.2 of emacs has been released. Maybe when the cygwin package is built, it'll be more stable. In the mean-time, I find the new features too invaluable to move back to 21, so I'll put up with the occasional crash (and save my work often!)



&lt;hr&gt;&lt;strong&gt;2008-05-07T1656+10 Update:&lt;/strong&gt;



I've just installed the version of emacs 22.2 compiled for Cygwin, prepared by &lt;a title="Angelo Graziosi's emacs 22.2 compiled for Cygwin" href="http://www.webalice.it/angelo.graziosi/cygwin/emacs/Emacs.html"&gt;Angelo Graziosi&lt;/a&gt;. It seems to be much more stable than the 22.1 version in Cygwin's repository, plus 22.2 has a few minor feature enhancements that are nice to boot!</description><category>cygwin</category><category>emacs</category><category>hacking</category><category>package</category><category>tip</category><guid>http://milosophical.me/blog/2008/04/04/cygwin-and-emacs-22.html</guid><pubDate>Thu, 03 Apr 2008 23:09:14 GMT</pubDate></item><item><title>Essentials to make Windows almost bareable</title><link>http://milosophical.me/blog/2007/06/07/essential-tools-to-make-windows-almost-bareable.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;Okay, so I hate working in Windows, but on my employer's equipment at least, I must live with it. After having had this machine replaced twice (faulty Dell hardware) and rebuilt more times than I can remember (Windows BSODs), for a total of at least 3 system migrations this past year, I thought I'd better keep a list of what free software to install on top of Windows, and what adjustments to make, so that at least I don't feel like I'm wearing a straight jacket.  Here goes:


&lt;!--more--&gt;

&lt;/p&gt;&lt;h3&gt;Useability&lt;/h3&gt;

Fix the keyboard to &lt;a href="http://sinewalker.wordpress.com/2006/03/27/dvorak-keyboards/"&gt;Dvorak&lt;/a&gt; (following is for Windows XP -- this will likely change for Vista... it shouldn't be this complicated!)

&lt;blockquote&gt;

&lt;ol&gt;
	&lt;li&gt;Open Control Panel:  &lt;strong&gt;START &amp;gt; Control Panel&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;Choose "&lt;strong&gt;Regional and Language Options&lt;/strong&gt;" (why not Keyboard???)&lt;/li&gt;
	&lt;li&gt;Select "&lt;strong&gt;Languages&lt;/strong&gt;" tab, press Details... button (sigh)&lt;/li&gt;
	&lt;li&gt;In the "&lt;strong&gt;Installed services&lt;/strong&gt;" section, select "&lt;strong&gt;Keyboard&lt;/strong&gt;", then press "&lt;strong&gt;Add...&lt;/strong&gt;" to add a new keyboard layout&lt;/li&gt;
	&lt;li&gt;Find &lt;strong&gt;US-Dvorak&lt;/strong&gt; in the list&lt;/li&gt;
	&lt;li&gt;In the "&lt;strong&gt;Default input language&lt;/strong&gt;" section, set the default language to English (Australia) - United States-Dvorak&lt;/li&gt;
	&lt;li&gt;In the "&lt;strong&gt;Preferences&lt;/strong&gt;" section, press "&lt;strong&gt;Language Bar...&lt;/strong&gt;" button&lt;/li&gt;
	&lt;li&gt;Make sure that "&lt;strong&gt;Show the language bar on the desktop&lt;/strong&gt;" is turned &lt;em&gt;&lt;strong&gt;on&lt;/strong&gt;&lt;/em&gt;, to make it easier to switch to QWERTY if needed&lt;/li&gt;
	&lt;li&gt;Back in "&lt;strong&gt;Preferences&lt;/strong&gt;", press the "&lt;strong&gt;Key Settings...&lt;/strong&gt;" button&lt;/li&gt;
	&lt;li&gt;Turn &lt;strong&gt;&lt;em&gt;off &lt;/em&gt;&lt;/strong&gt;all the language &lt;strong&gt;Hot keys&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;/blockquote&gt;

To get rid of that &lt;a href="http://www.winsupersite.com/images/showcase/xp_n_05.jpg"&gt;horrible&lt;/a&gt;, &lt;a href="http://www.winsupersite.com/images/showcase/xp_n_03.jpg"&gt;garish &lt;/a&gt;blue/green stock XP theme, I use the &lt;a title="Zune -- it's still Microsoft, but it looks less garish" href="http://stevenharman.net/blog/archive/2006/12/09/WinXP__Zune_Theme.aspx"&gt;Zune theme&lt;/a&gt; from Microsoft. It sucks less (the theme, that is, not the MP3 player, that sucks &lt;em&gt;more &lt;/em&gt;than iPod).



Make Explorer a bit useable.  Actually Explorer is total crap, and I'm still searching for a replacement. I like &lt;a href="http://en.wikipedia.org/wiki/Midnight_Commander"&gt;MidnightCommander&lt;/a&gt; in Cygwin (&lt;code&gt;mc&lt;/code&gt;), and &lt;a href="http://konqueror.kde.org/"&gt;Konqueror&lt;/a&gt; in KDE.  But for Windows, there aren't a lot of &lt;em&gt;free &lt;/em&gt;Explorer replacements, except maybe Windows File Explorer.  Anyway, follow these steps to have Explorer at least be not so stupid:

&lt;blockquote&gt;

&lt;ol&gt;
	&lt;li&gt;Open an Explorer window (anywhere)&lt;/li&gt;
	&lt;li&gt;Select "&lt;strong&gt;Tools &amp;gt; Folder Options...&lt;/strong&gt;", "&lt;strong&gt;General&lt;/strong&gt;" tab&lt;/li&gt;
	&lt;li&gt;Make sure that under "&lt;strong&gt;Browse folders&lt;/strong&gt;", the option is to "&lt;strong&gt;Open each folder in the same window&lt;/strong&gt;" (Explorer doesn't do multi-windows like Macintosh Finder: it screws them up)&lt;/li&gt;
	&lt;li&gt;In "&lt;strong&gt;Click items as follows&lt;/strong&gt;", turn on "&lt;strong&gt;Single-click to open&lt;/strong&gt;", and "&lt;strong&gt;Underline icons only when I point at them&lt;/strong&gt;"&lt;/li&gt;
	&lt;li&gt;Select the "&lt;strong&gt;View&lt;/strong&gt;" tab&lt;/li&gt;
	&lt;li&gt;Turn &lt;em&gt;&lt;strong&gt;on &lt;/strong&gt;&lt;/em&gt;the following:
&lt;ol&gt;
	&lt;li&gt;"Display the full path in the address bar"&lt;/li&gt;
	&lt;li&gt;"Display the full path in the title bar"&lt;/li&gt;
	&lt;li&gt;"Do not cache thumbnails"&lt;/li&gt;
	&lt;li&gt;"Show hidden files and folders"&lt;/li&gt;
	&lt;li&gt;"Show both parts and manage them individually" (for web pages and folders)&lt;/li&gt;
	&lt;li&gt;"Show encrypted or compressed NTFS files in color"&lt;/li&gt;
&lt;/ol&gt;

&lt;/li&gt;
	&lt;li&gt;Turn &lt;em&gt;&lt;strong&gt;off &lt;/strong&gt;&lt;/em&gt;the following:
&lt;ol&gt;
	&lt;li&gt;"Hide extensions for known file types"&lt;/li&gt;
	&lt;li&gt;"Launch folder windows in a separate process"&lt;/li&gt;
	&lt;li&gt;"Remember each folder'sview settings"&lt;/li&gt;
&lt;/ol&gt;

&lt;/li&gt;
	&lt;li&gt;Press the "&lt;strong&gt;Apply&lt;/strong&gt;", then "&lt;strong&gt;Apply to All Folders&lt;/strong&gt;" buttons&lt;/li&gt;
	&lt;li&gt;Press "&lt;strong&gt;OK&lt;/strong&gt;"&lt;/li&gt;
&lt;/ol&gt;

&lt;/blockquote&gt;

&lt;h3&gt;Programs&lt;/h3&gt;

Install these programs at a minimum:

&lt;blockquote&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a title="Rediscover the Web" href="http://en.www.mozilla.com/en/firefox/"&gt;Firefox &lt;/a&gt;(essential add-ons:  &lt;a title="social web bookmarks" href="http://del.icio.us/help/firefox/extension"&gt;del.icio.us&lt;/a&gt;, &lt;a title="Download Accellerator (and a better manager)" href="http://www.downthemall.net/"&gt;DownThemAll&lt;/a&gt;, &lt;a title="Spell-check input boxes, in en_au language" href="http://www.justlocal.com.au/clients/oooau/"&gt;English (AU) Dictionary&lt;/a&gt;, &lt;a title="Block's Flash adds" href="https://addons.mozilla.org/en-US/firefox/addon/433"&gt;Flashblock&lt;/a&gt;, &lt;a title="Make inline images larger" href="http://imagezoom.yellowgorilla.net/"&gt;ImageZoom&lt;/a&gt;, &lt;a title="Turn on/off proxy settings with one click" href="https://addons.mozilla.org/en-US/firefox/addon/1557"&gt;QuickProxy&lt;/a&gt;, &lt;a title="Synchronise your local bookmarks between Firefox installations" href="http://www.foxmarks.com"&gt;Foxmarks&lt;/a&gt;, &lt;a title="Turn your google mail account into free online storage" href="http://www.getgspace.com/"&gt;GSpace&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Open Source keystroke starter for Windows" href="http://www.launchy.net"&gt;Launchy&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a title="WFE description page" href="http://www.freesoftlabs.com/fileexpl.asp"&gt;Windows File Explorer&lt;/a&gt; (a free, sort-of &lt;a href="http://en.wikipedia.org/wiki/Orthodox_file_manager"&gt;orthodox&lt;/a&gt; file manager for Windows)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Brings Windows desktop up to status of 1990 Unix" href="http://virt-dimension.sourceforge.net"&gt;Virtual Dimension&lt;/a&gt; (Virtual desktop support for Windows)&lt;/li&gt;
	&lt;li&gt;&lt;a title="No Machine's Product listing page" href="http://www.nomachine.com/products.php"&gt;No Machine&lt;/a&gt;'s &lt;a title="NX Client - Windows - Download" href="http://www.nomachine.com/download-client-windows.php"&gt;NX Client for Windows&lt;/a&gt; (so I can connect a &lt;a title="NX Technology overview" href="http://www.nomachine.com/documentation/intr-technology.php"&gt;high speed X&lt;/a&gt; session to my home machine)&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://www.openoffice.org"&gt;OpenOffice.org&lt;/a&gt; (also use &lt;a href="http://www.justlocal.com.au/clients/oooau/"&gt;JustLocal&lt;/a&gt;'s dictionary / thesaurus files to get spell check working)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Unix compatibility layer for Windows" href="http://www.cygwin.com/"&gt;Cygwin &lt;/a&gt;(include the X11 modules, Emacs [make sure to select ver 22], pdksh, subversion, python, clisp, fortune, mc, ssh, units, etc....)&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://java.sun.com/javase/downloads/index.jsp"&gt;Java SE DevKit&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a title="Latest Windows Subversion binaries" href="http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=91"&gt;Subversion for Windows&lt;/a&gt; (version control)&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://www.netbeans.org/"&gt;NetBeans&lt;/a&gt; (6.0 or greater has everything I need)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Audio editor and MP3/OGG converter" href="http://audacity.sourceforge.net/download/windows"&gt;Audacity&lt;/a&gt; audio editor and encoder&lt;/li&gt;
	&lt;li&gt;&lt;a title="Network streaming Video" href="http://www.videolan.org/vlc/download-windows.html"&gt;VideoLAN Client&lt;/a&gt; movie player&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://www.illiminable.com/ogg/"&gt;Illiminable DirectShow filters&lt;/a&gt; for &lt;a href="http://www.vorbis.com/setup_windows/"&gt;OGG Vorbis&lt;/a&gt; (to play .OGG files in Windows Media Player)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Amiga MOD player" href="http://www.modplug.com/"&gt;MODPlug&lt;/a&gt; (because sometimes a good &lt;a href="http://del.icio.us/sinewalker/modules"&gt;MOD&lt;/a&gt; fits my mood)&lt;/li&gt;
	&lt;li&gt;&lt;a title="GNU Image Manipulation Program" href="http://gimp-win.sourceforge.net/"&gt;GIMP&lt;/a&gt; image editor&lt;/li&gt;
	&lt;li&gt;&lt;a title="Image viewer" href="http://www.irfanview.com/"&gt;IrfanView&lt;/a&gt; image viewer&lt;/li&gt;
&lt;/ul&gt;

&lt;/blockquote&gt;

&lt;h3&gt;Emacs&lt;/h3&gt;

Once Cygwin and Emacs are installed, I need to add my dotfiles (from backup), and also install these emacs add-ons:   &lt;a title="Superior Lisp Interaction Mode for Emacs" href="http://common-lisp.net/project/slime/"&gt;&lt;/a&gt;

&lt;blockquote&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a title="Superior Lisp Interaction Mode for Emacs" href="http://common-lisp.net/project/slime/"&gt;SLIME&lt;/a&gt; &lt;a href="http://sourceforge.net/projects/psgml"&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://sourceforge.net/projects/psgml"&gt;PSGML&lt;/a&gt; &lt;a title="Subversion support for Emacs (pre-22)" href="http://www.xsteve.at/prg/emacs/psvn.el"&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a title="Subversion support for Emacs (pre-22)" href="http://www.xsteve.at/prg/emacs/psvn.el"&gt;PSVN&lt;/a&gt; (not strictly needed, since emacs22 adds SVN support in VC mode)&lt;/li&gt;
	&lt;li&gt;&lt;a title="Collection of Emacs Development Environment Tools" href="http://cedet.sourceforge.net/"&gt;CEDET&lt;/a&gt; (this is not trivial to install, I&lt;em&gt; still &lt;/em&gt;haven't figured it out)&lt;a title="Collection of Emacs Development Environment Tools" href="http://cedet.sourceforge.net/"&gt; &lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a title="Java Development Environment for Emacs" href="http://jdee.sunsite.dk/"&gt;JDEE&lt;/a&gt; (requires some or all of CEDET)&lt;/li&gt;
	&lt;li&gt;&lt;a title="This is neat!" href="http://www.eaflux.com/cygwin/cyg-emacsclient/"&gt;cyg-emacsclient&lt;/a&gt; (wrapper to add Emacs to your SendTo folder, and have it actually work)&lt;/li&gt;
&lt;/ul&gt;

&lt;/blockquote&gt;

CEDET and JDEE might be more trouble than they're worth, especially since I'm installing NetBeans anyway. They seem cool (especially the enhanced speedbar), but they're not exactly plug-and-play. Jury's still out.</description><category>Delicious</category><category>Microsoft</category><category>cygwin</category><category>dvorak</category><category>emacs</category><category>hacking</category><category>how-to</category><category>jEdit</category><category>java</category><category>lisp</category><category>media</category><category>shell</category><guid>http://milosophical.me/blog/2007/06/07/essential-tools-to-make-windows-almost-bareable.html</guid><pubDate>Wed, 06 Jun 2007 23:16:44 GMT</pubDate></item><item><title>Remote desktop access on SuSE: Cygwin, X, XDMCP and SSH?  Nope.  FreeNX!</title><link>http://milosophical.me/blog/2007/03/22/remote-desktop-acces-suse-cygwin-x-and-xdmcp.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;strong&gt;MJL20080827 -- Update&lt;/strong&gt;:  I Just realised that this is one of my top-visited pages and it's a totally disorganised and incongruent pile of... What's worse is, I've never updated it since the promised update back in March 2007!


Let me clear things up (and save you wading through the whole article): If you want remote access to your openSUSE desktop from a networked thin client, then forget about X11, XDMCP, VNC or tunneling X through SSH. Use the &lt;a title="Nomachine's intro to NX" href="http://nomachine.com/documentation/html/intr-technology.html"&gt;NX&lt;/a&gt; protocol. You'll need to do the following:

&lt;ol&gt;
	&lt;li&gt;Install &lt;a title="FreeNX -- an opensource implementation of an NX protocol server" href="http://freenx.berlios.de/"&gt;FreeNX&lt;/a&gt; on your openSUSE host. Some (slightly outdated, but usable) instructions are in Chapter 9 of the &lt;a title="openSUSE 10.2 Reference manual (PDF)" href="http://www.novell.com/documentation/opensuse102/pdfdoc/opensuse102_reference/opensuse102_reference.pdf" target="_blank"&gt;openSUSE 10.2 Reference manual&lt;/a&gt;. If you're using openSUSE 11.0 or newer, &lt;a title="FreeNX" href="http://software.opensuse.org/search?baseproject=openSUSE%3A11.0&amp;amp;p=1&amp;amp;q=FreeNX"&gt;get the latest FreeNX package&lt;/a&gt; from the &lt;a title="All about openSUSE Build Service" href="http://build.opensuse.org/"&gt;openSUSE Build Service&lt;/a&gt; (there are &lt;a title="openSUSE one-click install standard" href="http://en.opensuse.org/Standards/One_Click_Install"&gt;one-click install&lt;/a&gt; buttons)&lt;/li&gt;
	&lt;li&gt;Install an NX client on your remote terminal(s). &lt;a title="Nomachine home page" href="http://www.nomachine.com/"&gt;Nomachine&lt;/a&gt; has &lt;a title="Nomachine's downloads page" href="http://www.nomachine.com/download.php"&gt;free NX clients&lt;/a&gt; for Linux, Mac, Windows and Solaris (even some experimental ones for PlayStation 2 and Zaurus!). If your remote terminal is running openSUSE, you could alternatively &lt;a title="Free NX client from OBS" href="http://software.opensuse.org/search?baseproject=openSUSE%3A11.0&amp;amp;p=1&amp;amp;q=freenx-client"&gt;get an open-source NX client&lt;/a&gt; from the build service (or ask yourself: I'm running X locally, so why don't I just use good ole SSH and X11?)&lt;/li&gt;
	&lt;li&gt;Configure your NX client to connect to the openSUSE host, then log in and enjoy!&lt;/li&gt;
&lt;/ol&gt;

&lt;strong&gt;The upshot: &lt;/strong&gt;I've done this with a FreeNX server and Nomachine's NX client for Windows XP, and it all "just works", except maybe for some font issues with older X clients like emacs (install extra font packages from nomachine to fix that), and some transparency effect issues I noticed in kwin4, probably to do with X11 extensions missing in the NX client. Not a big deal.



Read the rest of this article for the boring background and laughable false-starts in my quest for remote desktops in X... &amp;lt;blush/&amp;gt;



&lt;!--more--&gt;



...



What I would &lt;em&gt;really &lt;/em&gt;love to be able to do is get a graphical log-in screen to my openSUSE box, and have the &lt;a title="KDE Screenshots (Google)" href="http://images.google.com.au/images?q=kde%20screenshot&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;aq=t&amp;amp;rls=org.mozilla:en-US:official&amp;amp;client=firefox-a&amp;amp;um=1&amp;amp;sa=N&amp;amp;tab=wi"&gt;KDE &lt;/a&gt;environment displayed onto a single window within the WinXP desktop on the notebook (sort of like Windows' Remote Desktop feature &lt;code&gt;mstsc.exe&lt;/code&gt;, or the original &lt;a title="X Terminal (Wikipedia)" href="http://en.wikipedia.org/wiki/X_terminal"&gt;X Terminals&lt;/a&gt; we used when I was a student at &lt;a title="School of Computing, University of Tasmania" href="http://www.comp.utas.edu.au"&gt;UTas&lt;/a&gt; back in the nineties).  This way I'd have my full KDE desktop &lt;em&gt;and &lt;/em&gt;it'd be really comfy to use.  So what do I need to do?



Okay, I've finally had enough time at home  to play with connecting to my &lt;a title="openSUSE home" href="http://en.opensuse.org/Welcome_to_openSUSE.org"&gt;openSUSE&lt;/a&gt; box from my work's laptop (WinXP) over my wireless LAN.  It's all groovy:  I can use &lt;a title="PuTTY home" href="http://www.chiark.greenend.org.uk/~sgtatham/putty/"&gt;PuTTY&lt;/a&gt;, or &lt;a title="Cygwin download mirrors" href="http://cygwin.com/mirrors.html"&gt;Cygwin&lt;/a&gt;'s &lt;code&gt;ssh&lt;/code&gt; command (&lt;code&gt;ssh -Y&lt;/code&gt; to enable X11 tunnelling) to log in, list files, run programs (even X clients, so long as I've started Cygwin's X server first) and it's all secured by an &lt;a title="OpenSSH home" href="http://www.openssh.org/"&gt;SSH&lt;/a&gt; tunnel through the air between my study and my back deck (favorite place to work :-) ).  Note that using &lt;a title="Wireless standard 802.11b (Wikipedia)" href="http://en.wikipedia.org/wiki/802.11#802.11g"&gt;802.11g&lt;/a&gt; is probably a little slow for running intensely graphical X clients like photo viewers or &lt;a title="Xaos fractal zoomer home" href="http://wmi.math.u-szeged.hu/xaos/doku.php"&gt;&lt;code&gt;xaos&lt;/code&gt;&lt;/a&gt; ( :-) ), even with a strong signal, but it's good for running an IDE or &lt;a title="Konquerer (Wikipedia)" href="http://en.wikipedia.org/wiki/Konquerer"&gt;Konquerer&lt;/a&gt;.  And if you add the &lt;code&gt;-C &lt;/code&gt;(Compress) switch to &lt;code&gt;ssh&lt;/code&gt;, it speeds up the intense app's nicely!



Well, obviously I'll need to start X on the WinXP box, without &lt;code&gt;-multiwindow&lt;/code&gt;, and to &lt;code&gt;-query&lt;/code&gt; for an &lt;a title="X Display Manager Control Protocol (Wikipedia)" href="http://en.wikipedia.org/wiki/Xdmcp"&gt;XDMCP&lt;/a&gt; server on the openSUSE box.  This should work, since I use a graphical login on openSUSE, which means an XDMCP server is already running (KDM).  So I' tried that, and it doesn't work. Why?



It turns out that nearly every Linux distro' has configured their X display managers (kdm, xdm or gdm) to &lt;em&gt;disable &lt;/em&gt;XDMCP access from external servers and instead only allows connections from &lt;code&gt;localhost&lt;/code&gt; (i.e. from the Linux machine itself).



Why have they done that?  Because XDMCP is insecure:  it transmits passwords in clear.  Also, you cannot secure XDMCP with SSH, as XDMCP uses UDP as well as TCP protocols :-( .  So it's insecure and it cannot be fixed, therefore distribution providers (wisely) disable it.  If I want to have a remote &lt;em&gt;desktop&lt;/em&gt; as opposed to just seeing individual &lt;em&gt;windows&lt;/em&gt; in my Windows desktop (which is cool, but not what I want), then I'll need to either not use SSH and be insecure, or use something else like &lt;a title="Tight VNC -- free VNC server/client" href="http://www.tightvnc.com/"&gt;VNC&lt;/a&gt;.



I'm going to opt for the (insecure) option of not using SSH for X desktop access, and stick to traditional XDMCP sessions.  My reasons for this are:

&lt;ul&gt;
	&lt;li&gt;I want it to be &lt;em&gt;simple&lt;/em&gt;, and with as little overhead as possible (using VNC involves mucking about with session IDs, or &lt;a href="http://www.linux-mag.com/id/1311?r=s"&gt;running an extra X server on the Linux side&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;I only intend to access my Linux desktop from within my (W)LAN.  I have a firewall in the router, so I can set it to disallow access to ports UDP/177 and TCP/6000 from the Internet (or, if it proves too difficult to do it at the router, I can set openSUSE's own firewall to do that)&lt;/li&gt;
	&lt;li&gt;My WLAN is encrypted  over the air anyway (WPA/PSK) and it's also using a silent SSID &lt;em&gt;and &lt;/em&gt;a MAC-address white-list, so it's pretty secure already.  The only way for somebody to sniff out my password is to be physically attached to my router&lt;/li&gt;
	&lt;li&gt;So far I feel I can trust every computer attached to the LAN, since it's my own house.  If (&lt;em&gt;when&lt;/em&gt;?) this changes (that is, once my son is old enough to hack the network, so maybe when he's about eight years old?), I might revisit tunneling XDMCP sessions via VNC through SSH.&lt;/li&gt;
&lt;/ul&gt;

So, how do you set up good ole' XDMCP under Linux? &lt;a title="Linux XDMCP HOWTO (The Linux Documentation Project)" href="http://en.tldp.org/HOWTO/XDMCP-HOWTO/"&gt;READ THE FINE HOW-TO&lt;/a&gt;.  It's that simple, just remember that this is &lt;em&gt;not &lt;/em&gt;secure kids.  If you need security, use VNC, or just &lt;code&gt;ssh -Y&lt;/code&gt; to your Linux host and run individual X clients (with an X server on your local machine). I've also read &lt;a title="Cygwin X-Free mailing list archive" href="http://www.cygwin.com/ml/cygwin-xfree/2004-06/msg00204.html"&gt;in a mailing list&lt;/a&gt; that it's possible to start KDE from an SSH session anyway.  I might give that a go first, since it would be nearly as simple as XDMCP, and also secure.  But I really want my desktop, so we'll see what happens first….



&lt;hr&gt;&lt;strong&gt; 2007-03-26T08:22+1000 Update: &lt;/strong&gt; — Some mixed success



I've learned a couple of things over the week-end:

&lt;ol&gt;
	&lt;li&gt;&lt;code&gt; ssh -&lt;span style="text-decoration:underline;"&gt;C&lt;/span&gt;Y&lt;/code&gt; (use gzip compression when transmitting packets) produces satisfactory speed for &lt;code&gt;xaos&lt;/code&gt; or &lt;code&gt;gwenview&lt;/code&gt;, even over my WLAN&lt;/li&gt;
	&lt;li&gt;PuTTY doesn't seem to work any faster, even with Compression Enabled. Perhaps it doesn't support OpenSSL's compression?  I don't know.  Anyway, I don't need PuTTY as long as I have Cygwin with &lt;code&gt;ssh&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;You can start the KDE desktop from an &lt;code&gt;ssh&lt;/code&gt; session with the &lt;code&gt;startkde&lt;/code&gt; command.  However in openSUSE (at least my install) this takes a &lt;em&gt;long&lt;/em&gt; time to start, and eventually &lt;code&gt;kwin&lt;/code&gt; hangs on the notebook end.  On the client end (the openSUSE box), it maxes out the CPU&lt;/li&gt;
&lt;/ol&gt;

So that was exciting and a little disappointing.  I'll need to experiment a little more it seems.  I got expected warnings about missing font paths and ALSA not working, but I was still hoping to get the desktop up, just with some reduced functionality.  There were also warnings about certain X server extensions being unavailable on the Cygwin X server, which I didn't expect, but again, they aren't critical (no transparency support etc.).  Perhaps there's some environment variables that KDM sets which are causing kwin or other desktop subsystems some grief when missing?



If I still can't get it working soon, I might start with XDMCP, or I might skip straight to VNC after all.  One other thing to try before getting too drastic is to see if the Linux on my notebook's VMWare can run my KDE desktop remotely, or to try booting the notebook from a LiveCD such as Knoppix….



&lt;hr&gt;&lt;strong&gt; 2007-03-29T16:48+1000 Update: &lt;/strong&gt; — RTFM.  Indeed!



It's amazing what you can find out if you just read the manuals that come with your software.  Feeling silly now…I was exploring the &lt;a title="Novell openSUSE Reference manual (PDF)" href="http://milosophical.me/blog/2007/03/22/www.novell.com/documentation/opensuse102/pdfdoc/opensuse102_reference/opensuse102_reference.pdf"&gt;openSUSE Reference manual&lt;/a&gt; on the train home last night. Chapter nine is particularly interesting:  it describes FreeNX, a free remote desktop server, all ready to go on openSUSE, just install and follow the instructions.  There's even an &lt;a title="NX Client for Windows (NoMachine)" href="http://www.nomachine.com/download-client-windows.php"&gt;NX client for Windows&lt;/a&gt;. Much simpler, and still Free.



Looks like this is the way to go.  I'll try it out and do a (hopefully) final  update.</description><category>GUI</category><category>KDE</category><category>Unix</category><category>cygwin</category><category>freenx</category><category>hacking</category><category>how-to</category><category>linux</category><category>nomachine</category><category>nx</category><category>x11</category><category>xorg</category><guid>http://milosophical.me/blog/2007/03/22/remote-desktop-acces-suse-cygwin-x-and-xdmcp.html</guid><pubDate>Thu, 22 Mar 2007 02:59:02 GMT</pubDate></item><item><title>Finding DLLs used by a Cygwin program</title><link>http://milosophical.me/blog/2007/03/09/finding-dlls-used-by-a-cygwin-program.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I don't know how many other people get this issue, but it comes up at my work a bit: Some co-worker asks me if I know of a tool to do such-and-such, and invariably I think &lt;em&gt;“well, that's &lt;/em&gt;easy&lt;em&gt; to do on Unix, but on &lt;/em&gt;Windows&lt;em&gt;…”&lt;/em&gt;.


Then I remember Cygwin, and quickly find a Cygwin utility that does it, or can be scripted to do it with a small amount of work. So then co-worker asks if they can have a copy of this utility, and of course Cygwin is Free, so I say “sure, go download from &lt;a title="Cygwin download mirrors" href="http://www.cygwin.com/mirrors.html"&gt;www.cygwin.com&lt;/a&gt;.” Then they say, “yeah, but I don't want to install all of Cygwin, can't you just give me that one program?”



Well, the Cygwin command-line tools &lt;em&gt;can&lt;/em&gt; be run from a Windows &lt;code&gt;CMD.EXE&lt;/code&gt; shell, so this is quite possible to do. However, they all require the Cygwin POSIX layer, which at a minimum means I should also give them &lt;code&gt;cygwin1.dll&lt;/code&gt;. But what &lt;em&gt;other&lt;/em&gt; DLLs might the program use?



&lt;strong&gt;MJL2008-09-10T14:37+1000 Update:&lt;/strong&gt; since this page gets a lot of hits, here's the quick answer: &lt;strong&gt;use cygcheck&lt;/strong&gt;, i.e:

&lt;/p&gt;&lt;p style="text-align:center;"&gt;&lt;code&gt;cygcheck grep&lt;/code&gt;&lt;/p&gt;



Find it under Happy hacker discovery #2. Keep reading if you're bored...



&lt;!--more--&gt;



...



In the past, I used to just give the person the &lt;code&gt;cygwin1.dll&lt;/code&gt; DLL and a program (&lt;code&gt;SPLIT.EXE&lt;/code&gt;,say), let the person run it on their computer, explaining that it will crash with an error about a missing DLL. Then they would come back to me and say that they also need &lt;code&gt;cygintl-8.dll&lt;/code&gt; and try again. It will crash &lt;em&gt;again&lt;/em&gt; because &lt;code&gt;cygintl-8.dll&lt;/code&gt; just happens to link to &lt;code&gt;cygiconv-2.dll&lt;/code&gt;. After supplying this third DLL file, my co-worker can finally run &lt;code&gt;SPLIT.EXE&lt;/code&gt; and break their huge data set into manageable chunks. Everyone's happy.



The whole process is a bit embarrassing for me and annoying for them (though they &lt;em&gt;could&lt;/em&gt; just download the base Cygwin install like I &lt;em&gt;asked&lt;/em&gt;…) So, to solve this problem somewhat, I set about thinking &lt;em&gt;“I wonder if there's a Cygwin tool that can find DLLs in a program?”&lt;/em&gt;.



Well, a quick look at &lt;code&gt;info binutils&lt;/code&gt; reveals that there is nothing that &lt;em&gt;directly&lt;/em&gt; solves my problem of listing which DLLs a program links to. There is this thing called &lt;code&gt;dlltool&lt;/code&gt;, but it is for creating PE dynamic libraries, not for listing the libraries used by a PE executable. Bummer.

&lt;h3&gt;Happy hacker discovery #0&lt;/h3&gt;

Well, there is also a tool called &lt;code&gt;strings&lt;/code&gt;, which will list text strings in binary files. Now, Windows PE executables happen to contain the name of their linked DLLs as text strings, yay! So all I need to do, is pass &lt;code&gt;strings&lt;/code&gt; over a given program, filter for DLL names (to strip out error messages and such) and I have my list.



Oh, but then I'll need to repeat for each DLL as well. So I need a script to do it:

&lt;pre&gt;#!/bin/bash

#

# finds all the DLL files linked by a Win32 PE executable.

# Useful for finding needed DLLs to supply with a Cygwin program when

# sharing just that program with other people.

#



if [ x"$1" = x ]; then
    PROG=`basename $0`
    printf "Usage:  $PROG &amp;lt;command to list DLLs for&amp;gt;\\n"
    printf "        (you should not add '.exe' to the end).\\n"
    exit 1
fi



SEARCH_FILE=`which $1`.exe



# This is not perfect, as it's too permissive, but should be good enough

DLL_REGEXP='^[[:alnum:][:punct:]]*\\.[Dd][Ll][Ll]$'



# We don't care about the Win32 kernel API library...

KERNEL_REGEXP='[Kk][Ee][Rr][Nn][Ee][Ll]32\\.[Dd][Ll][Ll]'



# Get list of program's DLLs:

DLL_LIST=`strings -n 5 $SEARCH_FILE \\
          |grep $DLL_REGEXP \\
          |grep -v $KERNEL_REGEXP`


# Print the DLLs used directly by the program

printf "$SEARCH_FILE:\\n"

for I in $DLL_LIST; do
   printf "\\t$I\\n"
done

printf "\\t(KERNEL32.DLL)\\n\\n"



#Now find each DLL's dependencies (only one level deep though)

for CURR_DLL in $DLL_LIST; do
    SEARCH_DLL=`which $CURR_DLL`
    DLL_DLL_LIST=`strings -n 5 $SEARCH_DLL \\
                  |grep $DLL_REGEXP \\
                  |grep -v $KERNEL_REGEXP \\
                  |grep -v $CURR_DLL`
    printf " --&amp;gt;\\t$CURR_DLL:\\n"
    for I in $DLL_DLL_LIST; do
       printf "\\t\\t$I\\n"
    done
    printf "\\t\\t(KERNEL32.DLL)\\n\\n"
done&lt;/pre&gt;

There we are, a list of DLLs used by a given program, and the DLLs that those DLLs use.



It's not perfect: &lt;strong&gt;it is not recursive&lt;/strong&gt;, so only goes one level deep, but this should cover most cases. One day I might come back to this, when I figure out how to write a recursive function in bash.



So now I know which DLLs to give to my co-worker along with the nifty tool they want. But where on my system are they? Cygwin installs most DLLs into &lt;code&gt;/usr/bin&lt;/code&gt;. But sometimes they can be in &lt;code&gt;/usr/lib&lt;/code&gt;. So do I have to make a search?

&lt;h3&gt;Happy hacker discovery #1&lt;/h3&gt;

Well, no I don't. Cygwin's &lt;code&gt;which&lt;/code&gt; command also works for DLLs, yay! You just have to go:

&lt;pre&gt;  $ &lt;strong&gt;which cygwin1.dll&lt;/strong&gt;
  /usr/bin/cygwin1.dll&lt;strong&gt;
&lt;/strong&gt;  $ &lt;strong&gt;which cygintl-8.dll&lt;/strong&gt;
  /usr/bin/cygintl-8.dll
  $ &lt;strong&gt;which cygiconv-2.dll&lt;/strong&gt;
  /usr/bin/cygiconv-2.dll&lt;/pre&gt;
There, problem solved.

&lt;h3&gt;Happy hacker discovery #2&lt;/h3&gt;

&lt;strong&gt;Update: 2008-01-21 09:56+1100&lt;/strong&gt;: There's an awesome tool that comes with Cygwin, called &lt;code&gt;&lt;strong&gt;cygcheck&lt;/strong&gt;&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;, that does exactly what I need. Thanks for the tip, Leni! Here's a sample output for the SPLIT.EXE example:

&lt;pre&gt;$ &lt;strong&gt;cygcheck split&lt;/strong&gt;

Found: d:\cygwin\bin\split.exe

d:\cygwin\bin\split.exe
  d:\cygwin\bin\cygwin1.dll
    C:\WINDOWS\system32\ADVAPI32.DLL
      C:\WINDOWS\system32\ntdll.dll
      C:\WINDOWS\system32\KERNEL32.dll
      C:\WINDOWS\system32\RPCRT4.dll
        C:\WINDOWS\system32\Secur32.dll
  d:\cygwin\bin\cygintl-8.dll
    d:\cygwin\bin\cygiconv-2.dll&lt;/pre&gt;</description><category>code</category><category>cygwin</category><category>hacking</category><guid>http://milosophical.me/blog/2007/03/09/finding-dlls-used-by-a-cygwin-program.html</guid><pubDate>Thu, 08 Mar 2007 22:14:25 GMT</pubDate></item><item><title>Setting up multiple Java VMs under Cygwin</title><link>http://milosophical.me/blog/2007/03/09/setting-up-multiple-java-vms-under-cygwin.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;It is useful to have different versions of the JVM installed, for a number of reasons:
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;Different optimisation features from different JVM implementations&lt;/li&gt;
	&lt;li&gt;Different language features from different JVM versions&lt;/li&gt;
	&lt;li&gt;Java classes compiled with “&lt;em&gt;Tiger&lt;/em&gt;” won't run in “&lt;em&gt;Mantis&lt;/em&gt;”…&lt;/li&gt;
&lt;/ul&gt;

It is also useful to be able to quickly switch between installed JREs/JDKs depending on the task at hand.



If I'm hacking in Linux, the &lt;a title="JPackage home page" href="http://milosophical.me/blog/2007/03/09/www.jpackage.org"&gt;JPackage&lt;/a&gt; project provides a much &lt;a title="JPackage's install/location/naming policy facilitates use of the udate-alternative mechanism" href="http://www.jpackage.org/policy.php"&gt;nicer &lt;/a&gt;&lt;a title="Debian's update-alternatives solution explained" href="http://www.debian.org/doc/debian-policy/ap-pkg-alternatives.html"&gt;solution &lt;/a&gt;to this problem, and the Linux distro' I'm using (SUSE 10.0) &lt;a title="Instruction for installing Java on openSUSE" href="http://en.opensuse.org/Installing_Sun's_Java_on_SUSE_Linux"&gt;uses JPackage&lt;/a&gt;. It'd be nice if there was an &lt;code&gt;update-alternatives&lt;/code&gt; for Cygwin, but since there isn't I've come up with this hack.



&lt;!--more--&gt;



&lt;hr&gt;&lt;strong&gt;2007-03-09T08:06+1100 - Update: Neater &lt;code&gt;JVersion&lt;/code&gt; code&lt;/strong&gt; I've recently upgraded to &lt;em&gt;Mustang&lt;/em&gt; and noticed that this broke my function, since it installs to a different base directory &lt;em&gt;again&lt;/em&gt;… So here is a new version that hopefully covers off future default directory names that Sun comes up with for &lt;em&gt;Dolphin&lt;/em&gt; and the Open Source releases.

&lt;pre&gt;&lt;code&gt;

# Path variables

if [ x"$X_PATH_NO_JAVA" = x ]; then
    export X_PATH_NO_JAVA=~/bin:$PATH     # save path without JAVA, for future switches
fi



if [ x"$JAVA_BASE" = x ]; then
    JAVA_BASE=d:\\java    # default if not set in Windows
fi



# Functions

function JVersion() {
    # Select a Java Development Kit to use.
    # This provides similar functionality in Cygwin, to the
    # updatealternatives command of Debian/SuSE linux.
    #
    # Note, different releases have different standard dirs,
    # so we just look for "k" which seems to be the
    # thing they still have in common.  Also the sed scripts
    # which pull out the version number installed, for
    # reporting, must be specific for each release...

    #Convert JAVA_BASE to Cygwin format
    export JAVA_BASE=`cygpath -up $JAVA_BASE`

    # Use function's argument to select, defaulting to Mantis
    case $1 in
        1.6 | 1.6.0 | 6.0 | 6 | mustang | Mustang | MUSTANG)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.6.0`
            JVERNUM=`echo $JAVA_VER | sed s/^jdk//g`
        ;;
        1.5 | 1.5.0 | 5.0 | 5 | tiger | Tiger | TIGER)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.5.0`
            JVERNUM=`echo $JAVA_VER | sed s/^j2sdk//g`
        ;;
        * | MANTIS)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.4.2`
            JVERNUM=`echo $JAVA_VER | sed s/^j2sdk//g`
        ;;
    esac

    #Set the JAVA_HOME variable (used by some Java programs, so
    #must be in Windows format for those programs to understand)
    export JAVA_HOME=`cygpath -wp $JAVA_BASE/$JAVA_VER`

    #Add the correct JDK runtime to Cygwin's path
    export PATH=$JAVA_BASE/$JAVA_VER/bin:$X_PATH_NO_JAVA

    #Report what happened
    echo Java Version: $JVERNUM
    echo Java Base: $JAVA_BASE
    echo "Java Home: $JAVA_HOME (`cygpath -up $JAVA_HOME`)"
}



#Now run it to set up initial Java environment:

JVersion &amp;gt; /dev/null

&lt;/code&gt;&lt;/pre&gt;

This is all you need now, no complicated set-up variables and such rubbish. You'll notice that the setup steps are now just to set &lt;code&gt;$X_PATH_NO_JAVA&lt;/code&gt; (save the &lt;code&gt;$PATH&lt;/code&gt;&lt;em&gt; without&lt;/em&gt; Java in it), and set up &lt;code&gt;$JAVA_BASE&lt;/code&gt; if necessary. Then after the function is declared and I run it to set a default Java environment for Cygwin (Still &lt;em&gt;Mantis&lt;/em&gt; for now, since my work is using it for a system I support).



Read on for old stuff and false-starts...



...



I have a shell function called &lt;code&gt;JVersion&lt;/code&gt; which you use to select the version of the JVM you want to use, and a bunch of environment variables to make it all work.  Here's how you use it:

&lt;blockquote&gt;

&lt;pre&gt;$ &lt;strong&gt;JVersion tiger&lt;/strong&gt;

Java Version: 1.5.0_04

Java Base: /cygdrive/d/java

Java Home: /cygdrive/d/java/j2sdk1.5.0_04

$ &lt;strong&gt;java -version

&lt;/strong&gt;java version "1.5.0_04"

Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_04-b05)

Java HotSpot(TM) Client VM (build 1.5.0_04-b05, mixed mode, sharing)

$

$ &lt;strong&gt;JVersion mantis

&lt;/strong&gt;Java Version: 1.4.2_05

Java Base: /cygdrive/d/java

Java Home: /cygdrive/d/java/j2sdk1.4.2_05

$ &lt;strong&gt;java -version

&lt;/strong&gt;java version "1.4.2_05"

Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_05-b04)

Java HotSpot(TM) Client VM (build 1.4.2_05-b04, mixed mode)

$&lt;/pre&gt;

&lt;/blockquote&gt;

When using Java from the command-line (DOS or Cygwin), you need to have the interpreter (for JRE) and development tools (for JDK) on the system search PATH. You also used to have to set the CLASSPATH for the JRE to find bootstrap and extension classes, but these are now found automatically via the System property "&lt;code&gt;sun.boot.class.path&lt;/code&gt;" and the Java Extension Mechanism. However, it's still useful to have a JAVA_HOME variable for some third-party tools, such as IDEs.



I've written a bash function which uses some control variables to allow easy switching of JVMs on Cygwin. It's still a bit of a hack, but I find it useful when I'm on Windows to work from the bash prompt as well as whatever IDE I'm hacking in.



The control variables are

&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;JAVA_BASE&lt;/code&gt; = the base directory where all the JVMs are installed. I put each JVM in it's own directory under &lt;code&gt;D:\java&lt;/code&gt;
This variable should be in the Windows environment, but it defaults to &lt;code&gt;d:\java&lt;/code&gt; in my &lt;code&gt;.bashrc&lt;/code&gt; if it was not set (i.e. I forgot to):

&lt;pre&gt;if [ x"$JAVA_BASE" = x ]; then
     JAVA_BASE=d:\\java    # default if not set in Windows
fi&lt;/pre&gt;

I'm sticking to DOS pathnames for this variable, as I intend to replicate this functionality with batch files one day, in case I'm mad enough to run Java from a Windows command shell.  Anyway, I then convert this to a Cygwin path with the following &lt;a title="$man 1 sed" href="http://linux.ctyme.com/man/man2933.htm"&gt;&lt;code&gt;sed&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt; and &lt;a title="$man 1 gawk" href="http://linux.ctyme.com/man/man0898.htm"&gt;&lt;code&gt;awk&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt; hack:

&lt;pre&gt;JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes

export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \\
                                  | sed 's/d://cygdrive/d/g'` # fix drive&lt;/pre&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_MANTIS&lt;/code&gt; = the version (without the release part) corresponding to “&lt;em&gt;Mantis&lt;/em&gt;”&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_TIGER&lt;/code&gt; = the version (without release) corresponding to “&lt;em&gt;Tiger&lt;/em&gt;”&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_VER&lt;/code&gt; = the specific version and release of the currently selected JVM (e.g. 1.5.0_04)
&lt;pre&gt;if [ x"$JAVA_MANTIS" = x ]; then
  export JAVA_MANTIS=`ls $JAVA_BASE | grep 1.4.2 \\
                                    | sed s/^j2sdk//g`
fi

if [ x"$JAVA_TIGER" = x ]; then
  export JAVA_TIGER=`ls $JAVA_BASE | grep 1.5.0 \\
                                   | sed s/^j2sdk//g`
fi

if [ x"$JAVA_VER" = x ]; then
  export JAVA_VER=$JAVA_MANTIS     # default if not set
fi&lt;/pre&gt;

&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt; = the install directory of the currently selected JVM (e.g. &lt;code&gt;d:\java\j2sdk1.4.2_05&lt;/code&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;X_PATH_NO_JAVA&lt;code&gt; = the system search path, without a JVM&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;&lt;code&gt;PATH = the system search path&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

The aim is to set JAVA_HOME and PATH so that the Java tools can be found. They are set using the previous variables:

&lt;pre&gt;export JAVA_HOME=$JAVA_BASE/j2sdk$JAVA_VER

if [ x"$X_PATH_NO_JAVA" = x ]; then
  export X_PATH_NO_JAVA=~/bin:$PATH  # save path without JAVA
fi

export PATH=$JAVA_HOME/bin:$X_PATH_NO_JAVA&lt;/pre&gt;

So, the above code is run inside my &lt;code&gt;.bashrc&lt;/code&gt;, which takes care of finding the installed JVMs and setting Mantis as the default to use. But what about switching? Well, here's the shell function:

&lt;blockquote&gt;

&lt;pre&gt;function JVersion() {
    case $1 in
        1.5 | 1.5.0 | 5.0 | 5 | tiger | Tiger | TIGER)
            export JAVA_VER=$JAVA_TIGER
        ;;
        *)
        export JAVA_VER=$JAVA_MANTIS
        ;;
    esac

    JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes
    export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \
                                      | sed 's/d://cygdrive/d/g'` # fix drive
    export JAVA_HOME=$JAVA_BASE/j2sdk$JAVA_VER
    export PATH=$JAVA_HOME/bin:$X_PATH_NO_JAVA

    echo Java Version: $JAVA_VER
    echo Java Base: $JAVA_BASE
    echo Java Home: $JAVA_HOME
}&lt;/pre&gt;

&lt;/blockquote&gt;

You may have noticed that this hack is rather brittle. It works well, but only so long as you follow these steps:

&lt;ol&gt;
	&lt;li&gt;Install your Javas on your &lt;code&gt;D:&lt;/code&gt; drive (or you have to fix all of the &lt;code&gt;sed&lt;/code&gt; scripts!)&lt;/li&gt;
	&lt;li&gt;Have a “base” directory, such as &lt;code&gt;D:\java&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Have a Windows environment variable called &lt;code&gt;JAVA_BASE&lt;/code&gt; equal to the “base” directory&lt;/li&gt;
	&lt;li&gt;Install your Javas each in a sub-directory of your “base”, called &lt;code&gt;j2sdk&lt;em&gt;w&lt;/em&gt;.&lt;em&gt;x&lt;/em&gt;.&lt;em&gt;y&lt;/em&gt;_&lt;em&gt;z&lt;/em&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

Additionally it only caters for a &lt;em&gt;single&lt;/em&gt; release of each Java version, &lt;em&gt;and&lt;/em&gt; only for &lt;a title="Sun's internal J2SE release code names" href="http://java.sun.com/j2se/codenames.html"&gt;Java versions&lt;/a&gt; “&lt;em&gt;Mantis&lt;/em&gt;” (1.4.2) and “&lt;em&gt;Tiger&lt;/em&gt;” (1.5.0). If you want to install “&lt;em&gt;Mustang&lt;/em&gt;” and switch to it, you'll need to add a &lt;code&gt;JAVA_MUSTANG&lt;/code&gt; variable, equal to 1.6.0 and also add a case for 1.6.0 to both the &lt;code&gt;JAVA_VER&lt;/code&gt; setup code and the &lt;code&gt;JVersion&lt;/code&gt; &lt;code&gt;case&lt;/code&gt; statement… ugly, but I haven't come up with a more elegant solution yet.  Ultimately I'd like to make a proper replacement for &lt;code&gt;update-alternatives&lt;/code&gt;, but since symlinks will only work for the Cygwin tools, and not the Java tools themselves, it seems unlikely I'll come up with a nicer solution.

&lt;h3&gt;A note about paths in Java on Cygwin:&lt;/h3&gt;

This is noted in the Cygwin docs somewhere I think, but just a reminder: &lt;code&gt;java.exe&lt;/code&gt;, &lt;code&gt;javac.exe&lt;/code&gt;, etc. are Win32 programs, and are not linked to the Cygwin DLLs in any way. So &lt;em&gt;always&lt;/em&gt; they will need DOS style paths (&lt;code&gt;D:\&lt;em&gt;somedir&lt;/em&gt;\&lt;em&gt;etc&lt;/em&gt;&lt;/code&gt;). They won't understand Cygwin's &lt;code&gt;/cygdrive/d/&lt;em&gt;whatever&lt;/em&gt;&lt;/code&gt;. Also as I just alluded to, any Cygwin links will not be followed by the Java tools, for the same reason.  In &lt;a title="$man 1 bash" href="http://linux.ctyme.com/man/man0210.htm"&gt;&lt;code&gt;bash&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt;, you'll need to escape the sloshes if you're setting the classpath on the command line:

&lt;pre&gt;java -classpath D:\\\\java\\\\special-classes\\\\somefile.jar MyClass&lt;/pre&gt;

Since java transposes the &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; characters itself, it &lt;em&gt;may&lt;/em&gt; be possible to do the following:

&lt;pre&gt;java -classpath D:/java/special-classes/somefile.jar MyClass&lt;/pre&gt;

But I haven't tested it…



&lt;hr&gt;&lt;strong&gt;2006-06-17T16:39+1000 - Update: Cygwin's &lt;code&gt;cygpath&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command&lt;/strong&gt; I should have seen this before spending so long playing with sed and sloshes…Cygwin's &lt;code&gt;cygpath&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command can be used to fix the Unix/DOS path stuff, much simpler than mucking about with &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt;.  So in the above, instead of code like this:

&lt;pre&gt;JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes

export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \\
                                  | sed 's/d://cygdrive/d/g'` # fix drive&lt;/pre&gt;
… that mess can be replaced replaced with this:

&lt;pre&gt;&lt;code&gt;export JAVA_BASE=`cygpath -up $JAVA_BASE`&lt;/code&gt;&lt;/pre&gt;

… (using back-quotes, or the &lt;code&gt;$()&lt;/code&gt; notation if you prefer).  Similarly, to run Java with a classpath specified in a Cygwin format (i.e. from a Cygwin script or prompt):

&lt;pre&gt;&lt;code&gt;java -classpath `cygpath -wp /cygdrive/d/java/special-classes/somefile.jar` MyClass&lt;/code&gt;&lt;/pre&gt;</description><category>alternatives</category><category>code</category><category>cygwin</category><category>hacking</category><category>java</category><category>shell</category><category>sloshes</category><guid>http://milosophical.me/blog/2007/03/09/setting-up-multiple-java-vms-under-cygwin.html</guid><pubDate>Thu, 08 Mar 2007 21:21:02 GMT</pubDate></item><item><title>Cygwin users and groups</title><link>http://milosophical.me/blog/2006/10/27/cygwin-users-and-groups.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;When you first install cygwin and run bash, it'll usually display this error message:
&lt;/p&gt;&lt;blockquote&gt;

&lt;pre&gt;Your group is currently "mkpasswd".  This indicates that

the /etc/passwd (and possibly /etc/group) files should be rebuilt.

See the man pages for mkpasswd and mkgroup then, for example, run

mkpasswd -l [-d] &amp;gt; /etc/passwd

mkgroup  -l [-d] &amp;gt; /etc/group

Note that the -d switch is necessary for domain users.&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;!--more--&gt;If you happen to be in a corporate environment with a huge active directory, then the &lt;code&gt;mkpasswd&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command can take a very long time.  A quicker way to fix this issue (provided only the current user uses cygwin on this machine, which is most likely) is to issue this command instead:

&lt;blockquote&gt;

&lt;pre&gt;mkpasswd -l -c &amp;gt; /etc/passwd; mkgroup -l -d &amp;gt; /etc/group&lt;/pre&gt;

&lt;/blockquote&gt;

The &lt;code&gt;mkgroup&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command will still take a few minutes to complete, but typically there are much fewer groups than users, so it's bearable.</description><category>cygwin</category><category>hacking</category><category>how-to</category><category>tip</category><guid>http://milosophical.me/blog/2006/10/27/cygwin-users-and-groups.html</guid><pubDate>Thu, 26 Oct 2006 21:47:02 GMT</pubDate></item><item><title>Cygwin systray menu</title><link>http://milosophical.me/blog/2006/04/18/cygwin-systray-menu.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;
&lt;em&gt;This post was originally published
  at &lt;a href="http://sinewalker.wordpress.com/2006/04/18/cygwin-systray-menu/"&gt;sinewalker.wordpress.com&lt;/a&gt;
  on 18 April 2006.&lt;/em&gt;
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;While I'm on the subject of Cygwin hacking, I discovered this man-page about the Cygwin X server: type &lt;code&gt;man XWinrc&lt;/code&gt; and read about how you can hack your systray icon to include a little launcher menu for you favorite X clients 8)
&lt;/p&gt;
&lt;br&gt;
&lt;!--more--&gt;
&lt;p&gt;
Here's my &lt;code&gt;.XWinrc&lt;/code&gt; for cygwin, which I prepared earlier:

&lt;/p&gt;&lt;pre&gt;&lt;code&gt;MENU systray {
  xterm  EXEC "xterm -display %display%"
  mc EXEC "xterm -geometry 132x50 -display %display% mc"
  emacs EXEC "emacs -display %display%"
  xcalc EXEC "xcalc -display %display%"
  SEPARATOR
}

ROOTMENU systray

&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;
The example from the man-page has options to xterm to turn on scroll bars and such, but for me, that is already taken care of by my &lt;code&gt;.Xdefaults&lt;/code&gt; file:
&lt;/p&gt;
&lt;br&gt;

&lt;pre&gt;&lt;code&gt;
XTerm.*.background : black
XTerm.*.foreground : white
XTerm.*.cursorColor : yellow
XTerm.*.cursorBlink : true
XTerm.*.scrollBar : true
XTerm.*.Font : -*-fixed-medium-*-*-*-15-*-*-*-*-*-iso8859-1
XTerm.*.curses : on
XTerm.*.multiScroll : on
XTerm.*.jumpScroll : on

XCalc.*.background : DarkSlateGrey
XCalc.*.foreground : Wheat

gnuplot*background: black
gnuplot*textColor: yellow
gnuplot*borderColor: grey
gnuplot*axisColor: white
gnuplot*line1Width: 2
gnuplot*line2Width: 2
gnuplot*line3Width: 2
gnuplot*line4Width: 2
gnuplot*line5Width: 2
gnuplot*line6Width: 2
gnuplot*line7Width: 2
gnuplot*line8Width: 2
&lt;/code&gt;&lt;/pre&gt;</description><category>code</category><category>cygwin</category><category>hacking</category><guid>http://milosophical.me/blog/2006/04/18/cygwin-systray-menu.html</guid><pubDate>Tue, 18 Apr 2006 06:11:43 GMT</pubDate></item><item><title>Hacking emacsclient in cygwin</title><link>http://milosophical.me/blog/2006/04/18/hacking-emacsclient-in-cygwin.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;
&lt;em&gt;This post was originally published
  at &lt;a href="http://sinewalker.wordpress.com/2006/04/18/hacking-emacsclient-in-cygwin/"&gt;sinewalker.wordpress.com&lt;/a&gt;
  on 18 April 2006.&lt;/em&gt;
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I don't know why I haven't ever got around to this, but here—finally—is a hack to have Cygwin only ever start one instance of emacs (especially important in cygwin, because Win32 does not appear to share program texts between processes… )
&lt;/p&gt;

&lt;br&gt;

&lt;!--more--&gt;
&lt;p&gt;First, have Emacs start it's server whenever Emacs is started.  Put this in your &lt;code&gt;.emacs&lt;/code&gt; file:

&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(server-start)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Next, add the following function to your &lt;code&gt;.bashrc&lt;/code&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function emacs(){
  emacsclient $* || /usr/bin/emacs $*
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now, whenever you type &lt;code&gt;emacs somefile&lt;/code&gt;, instead of loading a fresh emacs process (expensive operation in Windows/cygwin), &lt;code&gt;emacsclient&lt;/code&gt; will be run, and attempt to connect to a running emacs server to edit &lt;code&gt;somefile&lt;/code&gt;. If there is no server (e.g. emacs has not been started), then &lt;code&gt;emacsclient&lt;/code&gt; will fail. In this case, &lt;code&gt;emacs&lt;/code&gt; will be started instead to edit the file, and the &lt;code&gt;.emacs&lt;/code&gt; file makes sure that the server is ready for &lt;code&gt;emacsclient&lt;/code&gt; next time.&lt;/p&gt;</description><category>code</category><category>cygwin</category><category>emacs</category><category>hacking</category><guid>http://milosophical.me/blog/2006/04/18/hacking-emacsclient-in-cygwin.html</guid><pubDate>Tue, 18 Apr 2006 05:57:29 GMT</pubDate></item></channel></rss>