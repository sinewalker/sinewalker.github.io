<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Milosophical Me (sloshes)</title><link>http://milosophical.me/</link><description></description><language>en</language><lastBuildDate>Fri, 23 Jan 2015 22:36:10 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Setting up multiple Java VMs under Cygwin</title><link>http://milosophical.me/blog/2007/03/09/setting-up-multiple-java-vms-under-cygwin.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;It is useful to have different versions of the JVM installed, for a number of reasons:
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;Different optimisation features from different JVM implementations&lt;/li&gt;
	&lt;li&gt;Different language features from different JVM versions&lt;/li&gt;
	&lt;li&gt;Java classes compiled with “&lt;em&gt;Tiger&lt;/em&gt;” won't run in “&lt;em&gt;Mantis&lt;/em&gt;”…&lt;/li&gt;
&lt;/ul&gt;

It is also useful to be able to quickly switch between installed JREs/JDKs depending on the task at hand.



If I'm hacking in Linux, the &lt;a title="JPackage home page" href="http://milosophical.me/blog/2007/03/09/www.jpackage.org"&gt;JPackage&lt;/a&gt; project provides a much &lt;a title="JPackage's install/location/naming policy facilitates use of the udate-alternative mechanism" href="http://www.jpackage.org/policy.php"&gt;nicer &lt;/a&gt;&lt;a title="Debian's update-alternatives solution explained" href="http://www.debian.org/doc/debian-policy/ap-pkg-alternatives.html"&gt;solution &lt;/a&gt;to this problem, and the Linux distro' I'm using (SUSE 10.0) &lt;a title="Instruction for installing Java on openSUSE" href="http://en.opensuse.org/Installing_Sun's_Java_on_SUSE_Linux"&gt;uses JPackage&lt;/a&gt;. It'd be nice if there was an &lt;code&gt;update-alternatives&lt;/code&gt; for Cygwin, but since there isn't I've come up with this hack.



&lt;!--more--&gt;



&lt;hr&gt;&lt;strong&gt;2007-03-09T08:06+1100 - Update: Neater &lt;code&gt;JVersion&lt;/code&gt; code&lt;/strong&gt; I've recently upgraded to &lt;em&gt;Mustang&lt;/em&gt; and noticed that this broke my function, since it installs to a different base directory &lt;em&gt;again&lt;/em&gt;… So here is a new version that hopefully covers off future default directory names that Sun comes up with for &lt;em&gt;Dolphin&lt;/em&gt; and the Open Source releases.

&lt;pre&gt;&lt;code&gt;

# Path variables

if [ x"$X_PATH_NO_JAVA" = x ]; then
    export X_PATH_NO_JAVA=~/bin:$PATH     # save path without JAVA, for future switches
fi



if [ x"$JAVA_BASE" = x ]; then
    JAVA_BASE=d:\\java    # default if not set in Windows
fi



# Functions

function JVersion() {
    # Select a Java Development Kit to use.
    # This provides similar functionality in Cygwin, to the
    # updatealternatives command of Debian/SuSE linux.
    #
    # Note, different releases have different standard dirs,
    # so we just look for "k" which seems to be the
    # thing they still have in common.  Also the sed scripts
    # which pull out the version number installed, for
    # reporting, must be specific for each release...

    #Convert JAVA_BASE to Cygwin format
    export JAVA_BASE=`cygpath -up $JAVA_BASE`

    # Use function's argument to select, defaulting to Mantis
    case $1 in
        1.6 | 1.6.0 | 6.0 | 6 | mustang | Mustang | MUSTANG)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.6.0`
            JVERNUM=`echo $JAVA_VER | sed s/^jdk//g`
        ;;
        1.5 | 1.5.0 | 5.0 | 5 | tiger | Tiger | TIGER)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.5.0`
            JVERNUM=`echo $JAVA_VER | sed s/^j2sdk//g`
        ;;
        * | MANTIS)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.4.2`
            JVERNUM=`echo $JAVA_VER | sed s/^j2sdk//g`
        ;;
    esac

    #Set the JAVA_HOME variable (used by some Java programs, so
    #must be in Windows format for those programs to understand)
    export JAVA_HOME=`cygpath -wp $JAVA_BASE/$JAVA_VER`

    #Add the correct JDK runtime to Cygwin's path
    export PATH=$JAVA_BASE/$JAVA_VER/bin:$X_PATH_NO_JAVA

    #Report what happened
    echo Java Version: $JVERNUM
    echo Java Base: $JAVA_BASE
    echo "Java Home: $JAVA_HOME (`cygpath -up $JAVA_HOME`)"
}



#Now run it to set up initial Java environment:

JVersion &amp;gt; /dev/null

&lt;/code&gt;&lt;/pre&gt;

This is all you need now, no complicated set-up variables and such rubbish. You'll notice that the setup steps are now just to set &lt;code&gt;$X_PATH_NO_JAVA&lt;/code&gt; (save the &lt;code&gt;$PATH&lt;/code&gt;&lt;em&gt; without&lt;/em&gt; Java in it), and set up &lt;code&gt;$JAVA_BASE&lt;/code&gt; if necessary. Then after the function is declared and I run it to set a default Java environment for Cygwin (Still &lt;em&gt;Mantis&lt;/em&gt; for now, since my work is using it for a system I support).



Read on for old stuff and false-starts...



...



I have a shell function called &lt;code&gt;JVersion&lt;/code&gt; which you use to select the version of the JVM you want to use, and a bunch of environment variables to make it all work.  Here's how you use it:

&lt;blockquote&gt;

&lt;pre&gt;$ &lt;strong&gt;JVersion tiger&lt;/strong&gt;

Java Version: 1.5.0_04

Java Base: /cygdrive/d/java

Java Home: /cygdrive/d/java/j2sdk1.5.0_04

$ &lt;strong&gt;java -version

&lt;/strong&gt;java version "1.5.0_04"

Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_04-b05)

Java HotSpot(TM) Client VM (build 1.5.0_04-b05, mixed mode, sharing)

$

$ &lt;strong&gt;JVersion mantis

&lt;/strong&gt;Java Version: 1.4.2_05

Java Base: /cygdrive/d/java

Java Home: /cygdrive/d/java/j2sdk1.4.2_05

$ &lt;strong&gt;java -version

&lt;/strong&gt;java version "1.4.2_05"

Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_05-b04)

Java HotSpot(TM) Client VM (build 1.4.2_05-b04, mixed mode)

$&lt;/pre&gt;

&lt;/blockquote&gt;

When using Java from the command-line (DOS or Cygwin), you need to have the interpreter (for JRE) and development tools (for JDK) on the system search PATH. You also used to have to set the CLASSPATH for the JRE to find bootstrap and extension classes, but these are now found automatically via the System property "&lt;code&gt;sun.boot.class.path&lt;/code&gt;" and the Java Extension Mechanism. However, it's still useful to have a JAVA_HOME variable for some third-party tools, such as IDEs.



I've written a bash function which uses some control variables to allow easy switching of JVMs on Cygwin. It's still a bit of a hack, but I find it useful when I'm on Windows to work from the bash prompt as well as whatever IDE I'm hacking in.



The control variables are

&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;JAVA_BASE&lt;/code&gt; = the base directory where all the JVMs are installed. I put each JVM in it's own directory under &lt;code&gt;D:\java&lt;/code&gt;
This variable should be in the Windows environment, but it defaults to &lt;code&gt;d:\java&lt;/code&gt; in my &lt;code&gt;.bashrc&lt;/code&gt; if it was not set (i.e. I forgot to):

&lt;pre&gt;if [ x"$JAVA_BASE" = x ]; then
     JAVA_BASE=d:\\java    # default if not set in Windows
fi&lt;/pre&gt;

I'm sticking to DOS pathnames for this variable, as I intend to replicate this functionality with batch files one day, in case I'm mad enough to run Java from a Windows command shell.  Anyway, I then convert this to a Cygwin path with the following &lt;a title="$man 1 sed" href="http://linux.ctyme.com/man/man2933.htm"&gt;&lt;code&gt;sed&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt; and &lt;a title="$man 1 gawk" href="http://linux.ctyme.com/man/man0898.htm"&gt;&lt;code&gt;awk&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt; hack:

&lt;pre&gt;JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes

export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \\
                                  | sed 's/d://cygdrive/d/g'` # fix drive&lt;/pre&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_MANTIS&lt;/code&gt; = the version (without the release part) corresponding to “&lt;em&gt;Mantis&lt;/em&gt;”&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_TIGER&lt;/code&gt; = the version (without release) corresponding to “&lt;em&gt;Tiger&lt;/em&gt;”&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_VER&lt;/code&gt; = the specific version and release of the currently selected JVM (e.g. 1.5.0_04)
&lt;pre&gt;if [ x"$JAVA_MANTIS" = x ]; then
  export JAVA_MANTIS=`ls $JAVA_BASE | grep 1.4.2 \\
                                    | sed s/^j2sdk//g`
fi

if [ x"$JAVA_TIGER" = x ]; then
  export JAVA_TIGER=`ls $JAVA_BASE | grep 1.5.0 \\
                                   | sed s/^j2sdk//g`
fi

if [ x"$JAVA_VER" = x ]; then
  export JAVA_VER=$JAVA_MANTIS     # default if not set
fi&lt;/pre&gt;

&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt; = the install directory of the currently selected JVM (e.g. &lt;code&gt;d:\java\j2sdk1.4.2_05&lt;/code&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;X_PATH_NO_JAVA&lt;code&gt; = the system search path, without a JVM&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;&lt;code&gt;PATH = the system search path&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

The aim is to set JAVA_HOME and PATH so that the Java tools can be found. They are set using the previous variables:

&lt;pre&gt;export JAVA_HOME=$JAVA_BASE/j2sdk$JAVA_VER

if [ x"$X_PATH_NO_JAVA" = x ]; then
  export X_PATH_NO_JAVA=~/bin:$PATH  # save path without JAVA
fi

export PATH=$JAVA_HOME/bin:$X_PATH_NO_JAVA&lt;/pre&gt;

So, the above code is run inside my &lt;code&gt;.bashrc&lt;/code&gt;, which takes care of finding the installed JVMs and setting Mantis as the default to use. But what about switching? Well, here's the shell function:

&lt;blockquote&gt;

&lt;pre&gt;function JVersion() {
    case $1 in
        1.5 | 1.5.0 | 5.0 | 5 | tiger | Tiger | TIGER)
            export JAVA_VER=$JAVA_TIGER
        ;;
        *)
        export JAVA_VER=$JAVA_MANTIS
        ;;
    esac

    JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes
    export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \
                                      | sed 's/d://cygdrive/d/g'` # fix drive
    export JAVA_HOME=$JAVA_BASE/j2sdk$JAVA_VER
    export PATH=$JAVA_HOME/bin:$X_PATH_NO_JAVA

    echo Java Version: $JAVA_VER
    echo Java Base: $JAVA_BASE
    echo Java Home: $JAVA_HOME
}&lt;/pre&gt;

&lt;/blockquote&gt;

You may have noticed that this hack is rather brittle. It works well, but only so long as you follow these steps:

&lt;ol&gt;
	&lt;li&gt;Install your Javas on your &lt;code&gt;D:&lt;/code&gt; drive (or you have to fix all of the &lt;code&gt;sed&lt;/code&gt; scripts!)&lt;/li&gt;
	&lt;li&gt;Have a “base” directory, such as &lt;code&gt;D:\java&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Have a Windows environment variable called &lt;code&gt;JAVA_BASE&lt;/code&gt; equal to the “base” directory&lt;/li&gt;
	&lt;li&gt;Install your Javas each in a sub-directory of your “base”, called &lt;code&gt;j2sdk&lt;em&gt;w&lt;/em&gt;.&lt;em&gt;x&lt;/em&gt;.&lt;em&gt;y&lt;/em&gt;_&lt;em&gt;z&lt;/em&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

Additionally it only caters for a &lt;em&gt;single&lt;/em&gt; release of each Java version, &lt;em&gt;and&lt;/em&gt; only for &lt;a title="Sun's internal J2SE release code names" href="http://java.sun.com/j2se/codenames.html"&gt;Java versions&lt;/a&gt; “&lt;em&gt;Mantis&lt;/em&gt;” (1.4.2) and “&lt;em&gt;Tiger&lt;/em&gt;” (1.5.0). If you want to install “&lt;em&gt;Mustang&lt;/em&gt;” and switch to it, you'll need to add a &lt;code&gt;JAVA_MUSTANG&lt;/code&gt; variable, equal to 1.6.0 and also add a case for 1.6.0 to both the &lt;code&gt;JAVA_VER&lt;/code&gt; setup code and the &lt;code&gt;JVersion&lt;/code&gt; &lt;code&gt;case&lt;/code&gt; statement… ugly, but I haven't come up with a more elegant solution yet.  Ultimately I'd like to make a proper replacement for &lt;code&gt;update-alternatives&lt;/code&gt;, but since symlinks will only work for the Cygwin tools, and not the Java tools themselves, it seems unlikely I'll come up with a nicer solution.

&lt;h3&gt;A note about paths in Java on Cygwin:&lt;/h3&gt;

This is noted in the Cygwin docs somewhere I think, but just a reminder: &lt;code&gt;java.exe&lt;/code&gt;, &lt;code&gt;javac.exe&lt;/code&gt;, etc. are Win32 programs, and are not linked to the Cygwin DLLs in any way. So &lt;em&gt;always&lt;/em&gt; they will need DOS style paths (&lt;code&gt;D:\&lt;em&gt;somedir&lt;/em&gt;\&lt;em&gt;etc&lt;/em&gt;&lt;/code&gt;). They won't understand Cygwin's &lt;code&gt;/cygdrive/d/&lt;em&gt;whatever&lt;/em&gt;&lt;/code&gt;. Also as I just alluded to, any Cygwin links will not be followed by the Java tools, for the same reason.  In &lt;a title="$man 1 bash" href="http://linux.ctyme.com/man/man0210.htm"&gt;&lt;code&gt;bash&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt;, you'll need to escape the sloshes if you're setting the classpath on the command line:

&lt;pre&gt;java -classpath D:\\\\java\\\\special-classes\\\\somefile.jar MyClass&lt;/pre&gt;

Since java transposes the &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; characters itself, it &lt;em&gt;may&lt;/em&gt; be possible to do the following:

&lt;pre&gt;java -classpath D:/java/special-classes/somefile.jar MyClass&lt;/pre&gt;

But I haven't tested it…



&lt;hr&gt;&lt;strong&gt;2006-06-17T16:39+1000 - Update: Cygwin's &lt;code&gt;cygpath&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command&lt;/strong&gt; I should have seen this before spending so long playing with sed and sloshes…Cygwin's &lt;code&gt;cygpath&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command can be used to fix the Unix/DOS path stuff, much simpler than mucking about with &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt;.  So in the above, instead of code like this:

&lt;pre&gt;JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes

export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \\
                                  | sed 's/d://cygdrive/d/g'` # fix drive&lt;/pre&gt;
… that mess can be replaced replaced with this:

&lt;pre&gt;&lt;code&gt;export JAVA_BASE=`cygpath -up $JAVA_BASE`&lt;/code&gt;&lt;/pre&gt;

… (using back-quotes, or the &lt;code&gt;$()&lt;/code&gt; notation if you prefer).  Similarly, to run Java with a classpath specified in a Cygwin format (i.e. from a Cygwin script or prompt):

&lt;pre&gt;&lt;code&gt;java -classpath `cygpath -wp /cygdrive/d/java/special-classes/somefile.jar` MyClass&lt;/code&gt;&lt;/pre&gt;</description><category>alternatives</category><category>code</category><category>cygwin</category><category>hacking</category><category>java</category><category>shell</category><category>sloshes</category><guid>http://milosophical.me/blog/2007/03/09/setting-up-multiple-java-vms-under-cygwin.html</guid><pubDate>Thu, 08 Mar 2007 21:21:02 GMT</pubDate></item></channel></rss>