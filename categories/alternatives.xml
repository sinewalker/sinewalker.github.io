<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Milosophical Me (alternatives)</title><link>http://milosophical.me/</link><description></description><language>en</language><lastBuildDate>Fri, 23 Jan 2015 22:36:09 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Solaris X11 and Dvorak simplified keyboard layout</title><link>http://milosophical.me/blog/2008/06/18/solaris-x11-and-dvorak-simplified-keyboard-layout.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I've recently been playing with &lt;a title="OpenSolaris web site" href="http://opensolaris.org"&gt;OpenSolaris&lt;/a&gt; and &lt;a title="SDN Solaris Express DE Community web site" href="http://developers.sun.com/sxde/community.jsp"&gt;Solaris Express DE&lt;/a&gt; running in &lt;a title="Sun's xVM VirtualBox web site" href="http://virtualbox.org"&gt;VirtualBox&lt;/a&gt;. They're fine so far (except audio isn't working) but I stumbled on a usability issue that was nearly a show-stopper: dratted QWERTY layouts! The GNOME GUI for switching to Dvorak doesn't work, and &lt;code&gt;setxkbmap&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; can't find the rules file for dvorak either (they don't seem to be installed where the man page indicates)...


&lt;!--more--&gt;Well, after some searching around I discovered that for Solaris X11, need to use &lt;strong&gt;&lt;code&gt;xmodmap&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/strong&gt;. The xmodmap key maps for Solaris are located in &lt;strong&gt;&lt;code&gt;/usr/share/xmodmap&lt;/code&gt;&lt;/strong&gt; so you can switch between Dvorak and QWERTY thus:

&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;xmodmap /usr/share/xmodmap/xmodmap.dvorak&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;xmodmap /usr/share/xmodmap/xmodmap.us&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

Making a pair of shell aliases for these verbose commands would be handy too:

&lt;pre&gt;alias asdf "xmodmap /usr/share/xmodmap/xmodmap.dvorak"

alias aoeu "xmodmap /usr/share/xmodmap/xmodmap.us"&lt;/pre&gt;

with these, just type the first four keys of the home row and press enter to flip to the other layout. Xmodmap only affects X11 (global for all running and new X clients).</description><category>alternatives</category><category>dvorak</category><category>hacking</category><category>keyboards</category><category>solaris</category><category>tip</category><category>useability</category><guid>http://milosophical.me/blog/2008/06/18/solaris-x11-and-dvorak-simplified-keyboard-layout.html</guid><pubDate>Wed, 18 Jun 2008 04:00:46 GMT</pubDate></item><item><title>Back to openSUSE</title><link>http://milosophical.me/blog/2008/03/31/back-to-opensuse.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;Well, my stint in *buntu is over, and it ends with an award to openSUSE: this is the first Linux distro I've returned to.


Kubuntu is nice, and I'm happy that I've tried it out, but it's not for me. It's nice enough if you want a simple desktop system, and APT rocks (especially with the aptitude front-end). But it's just not as good as openSUSE, sorry.



&lt;!--more--&gt;Kubuntu's KDE version of the apt installer (Adept) crashes during installs (not exactly inspiring confidence in the system) so I used Synaptic instead, why can't they just stick to the one that works? It's not like Adept is integrated with KDE in any way: it's menus don't go on the KDE menu bar for instance. Also Kubuntu's version of the KDE help system has every heading repeated. And the constant bickering between the GTK and QT factions of *buntu, with insane NIH arguments are just anoying (it's all *buntu, for crying out loud!).  Finally, having watched &lt;a title="Blank ttys when using vesafb (vga=xxx)" href="https://bugs.launchpad.net/bugs/129910"&gt;bug #129910&lt;/a&gt; continue in it's ridiculous way, I've decided I don't particularly like the development community behind *buntu either. I mean, come on! Six months to fix a reversion introduced to frame buffer consoles in Gutsy?! WTF! Okay that might be a bit mean: it's probably a tricky bug. But, the continuous "not a bug" comments from developers and "please consider the code of conduct" comments from moderators (in response to comments where the "code" has &lt;em&gt;not&lt;/em&gt; been broken) are just insulting. Add in that other things weren't working (FreeNX being an important one for me) and I've had enough: I've moved on, or rather, back, to openSUSE.



I briefly considered Debian, but went back to something I know. Besides, openSUSE 10.3 has removed the hideous mistake that was ZMD, and so updates and installs (using zypper, at least) are actually not too slow now, and boot times are comparible with *buntu too, at about 30 secs for my five-year-old AlthonXP, which were my biggest gripes with 10.2. YaST is still rather slow, but there are promising signs that this will improve for 11. KDE 4.0 should be standard with 11 also, and 4.1 won't be too far behind. Looking forward to it. It's nice to be using a distro where innovation is happening (Compiz; Kickoff, which I didn't like initially but has grown on me with KDE 4; KDE development in general)

&lt;/p&gt;&lt;p align="center"&gt;I've taken the green pill and having a lot of fun ;)&lt;/p&gt;</description><category>SUSE</category><category>alternatives</category><category>computers</category><category>hacking</category><category>kubuntu</category><category>observation</category><category>rant</category><category>thoughts</category><guid>http://milosophical.me/blog/2008/03/31/back-to-opensuse.html</guid><pubDate>Sun, 30 Mar 2008 22:44:49 GMT</pubDate></item><item><title>Hetrogeneous Operating Environments considered normal</title><link>http://milosophical.me/blog/2007/08/30/hetrogeneous-operating-environments-considered-normal.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;Was reading &lt;a title="an inside look at KDE 4.0" href="http://rackit.gartnerwebdev.com/2007/08/28/ready-for-a-new-k-an-inside-look-at-kde-40/" target="_blank"&gt;this interview&lt;/a&gt; with Wade Olson about KDE 4.0.  It is pretty interesting, but the best quote was at the end:
&lt;/p&gt;&lt;blockquote&gt;I often rant about how in all disruptive technologies, trends are always the same. Whether with the automobile, railroads, telephony or computers. A dominant company establishes ubiquity, but eventually competition settles in. Can you believe that Fords and Chevys can drive on the same roads and use the same gas? What a miracle of modern science that an AT&amp;amp;T user could call a Sprint user on the phone? A TGV and ICE train can ride on the same tracks? Madness! I can plug a lamp into the wall that my power company didn’t sell me? Now that’s what I call progress.

Why would computing be any different? I can’t believe that some choose to write software for a large audience that isn’t cross platform, browser-based or interoperable - but some do. Over time, proprietary file formats will go from being a competitive advantage to disadvantage. Heterogeneous systems are the norm and expected in every industry. It’s just tough being patient in ours.&lt;/blockquote&gt;

Whatever your views on OOXML or Linux or Apple or DRM or FOSS/Proprietary software, or other contentious issues in the IT  industry, you've got to admit, these are pretty sensible aims.</description><category>GUI</category><category>KDE</category><category>alternatives</category><category>computers</category><category>quote</category><category>thoughts</category><category>useability</category><guid>http://milosophical.me/blog/2007/08/30/hetrogeneous-operating-environments-considered-normal.html</guid><pubDate>Thu, 30 Aug 2007 01:47:52 GMT</pubDate></item><item><title>kubuntu - other desktops</title><link>http://milosophical.me/blog/2007/05/17/kubuntu-other-desktops.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;Quick note:-  I use &lt;a title="K[ewl] Desktop Environment" href="http://www.kde.org"&gt;KDE&lt;/a&gt; nearly all the time.  But sometimes I have occasion for a minimal desktop (e.g. when I plan to use just one, heavy program like &lt;a title="FlightGear Flight Simulator" href="http://www.flightgear.org/"&gt;FlightGear&lt;/a&gt; and need basically not much more than a window manager and X itself).  So an alternate "light" desktop session type is nice to have.


&lt;!--more--&gt; There is the &lt;a title="Xubuntu Linux" href="http://www.xubuntu.org/"&gt;Xubuntu&lt;/a&gt; distribution of ubuntu, which uses &lt;a title="Xfce home" href="http://www.xfce.org/"&gt;Xfce&lt;/a&gt;.  But I don't need to switch my whole linux install over.  It's easy to add Xfce to an installed Kubuntu (or Ubuntu):

&lt;code&gt;

&lt;/code&gt;

&lt;/p&gt;&lt;p align="center"&gt;&lt;code&gt; sudo aptitude update &amp;amp;&amp;amp; sudo aptitude install xubuntu-desktop&lt;/code&gt;&lt;/p&gt;



&lt;code&gt; &lt;/code&gt;

I got this incantation from &lt;a title="Installing Xfce on Ubuntu" href="http://www.psychocats.net/ubuntu/xubuntu"&gt;over here&lt;/a&gt;. This adds the packages for Xfce and puts a new session into your display manager's Session Type menu.  If you had kubuntu or xubuntu and wanted GNOME as well you could install GNOME into either of them with the &lt;code&gt;gnome-desktop-environment&lt;/code&gt; master package, I suppose. GNOME isn't my cup of tea.



I haven't played with &lt;code&gt;aptitude&lt;/code&gt; yet, but you could substite &lt;code&gt;agt-get&lt;/code&gt; for it in the commands above too I guess.



Yes, I know, Xfce is more than a window manager; it also has it's own file manager, terminal program, and so on.  But the main feature is that it's &lt;em&gt;fast &lt;/em&gt;and &lt;em&gt;small&lt;/em&gt;, which matters most to me for it's purpose on my system.



&lt;hr&gt;&lt;strong&gt;2007-05-21T10:37+1000 Update&lt;/strong&gt; RTFM &lt;em&gt;again&lt;/em&gt;!

Since [k|x|ed]ubuntu is &lt;a href="http://www.ubuntulinux.org/community/ubuntustory"&gt;built upon&lt;/a&gt; &lt;a href="http://www.debian.org"&gt;Debian&lt;/a&gt;, all the documentation describing Debian packaging and tools (&lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;apt-cache&lt;/code&gt;, &lt;code&gt;aptitude&lt;/code&gt;, &lt;code&gt;dselect&lt;/code&gt; and so on) can be found at their site.  The &lt;a href="http://www.debian.org/doc/manuals/apt-howto/"&gt;APT HOWTO&lt;/a&gt; is also probably a good place to start…</description><category>GUI</category><category>alternatives</category><category>hacking</category><category>kubuntu</category><guid>http://milosophical.me/blog/2007/05/17/kubuntu-other-desktops.html</guid><pubDate>Thu, 17 May 2007 06:45:09 GMT</pubDate></item><item><title>Kubuntu kaboose</title><link>http://milosophical.me/blog/2007/05/16/kubuntu-kaboose.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;Yes, I've joined the ubuntu train, and I'm travelling in the Kubuntu car (the caboose?).


This will be, what, my &lt;strong&gt;fifth &lt;/strong&gt;(or sixth if you count Knoppix, but I never put that on my hard drive) Linux distro since trying out RedHat 5.2 back in 1999.  Previous to this I was using openSUSE 10.2 which is not a bad distro either and I always had my eye on SuSE.  So, why yet another distro change?



&lt;!--more--&gt;

&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;openSUSE's YaST tool.  It's sssoooo sssllloooowww.  Even Gentoo's Portage is faster for installing software, and &lt;em&gt;that &lt;/em&gt;has to compile the programs from source code!&lt;/li&gt;
	&lt;li&gt;ZMD doesn't work.  It keeps breaking, crashing or going ballistic with the CPU&lt;/li&gt;
	&lt;li&gt;What is with all the susefications?  I really don't like the system menu in openSUSE and couldn't  find a way to turn it off&lt;/li&gt;
	&lt;li&gt;Some vital programs don't run:  Rosegarden and Google Earth lock up, FlightGear just won't run&lt;/li&gt;
	&lt;li&gt;Like others in the community, I am grateful to Novell for what they have done in their fight with SCO, but unsure about their deal with Microsoft.  I like to think that perhaps the CEO is just a little naïve about M$ (or hasn't been bitten by them like me — I don't trust the Novell version of OpenOffice to be hands-off on my document, and not fiddle the format somehow)&lt;/li&gt;
&lt;/ul&gt;

It is a shame since I do really like openSUSE, but this issue, together with the technical nags has tipped me over the edge and I'm moving on.



So, like was &lt;a title="Comment on " href="http://sinewalker.wordpress.com/2006/01/24/linux-distro-woes/#comments"&gt;suggested to me&lt;/a&gt; a bit over a year ago,  I'm switching to Kubuntu.  It's the latest favourite distro and has good reviews, from &lt;a title="aseigo - key KDE developer" href="http://aseigo.blogspot.com/"&gt;people &lt;/a&gt;I &lt;a title="canllaith - KDE documentor" href="http://www.canllaith.org/"&gt;respect &lt;/a&gt;in the KDE community, so my initial fears a year ago about it's KDE support being sub-par would seem to be unfounded.



I have to say:  switching to kubuntu has been the easiest Linux distro migration I have ever undertaken in eight years! Twenty minutes to install on my three-year-old home-built PC (Athlon XP1800+, 512MiB RAM, IDE drives, Radeon rv280 GPU and a 48cm LCD, plus other bits). Also, this is the first time that I've been able to surf the Net while an operating system installs itself! Yes, most Linuxen let you switch to another VT and run console programs, but no other installer I've seen lets you run a graphical KDE session while it installs, which is impressive and also very useful — I can read the installation manual on the Net while I install, no need to print it out or have a second computer running to one side.



Package installation is a breeze, and Feisty comes with the "universe" and "multiverse" repositories enabled, so getting "restricted formats" working took 10 minutes, and the installer was smart enough to configure APT to use a local mirror in Australia too! Very fast and very cool.



And to top it off:  Google Earth works and Beryl was a snap to install compared to getting Compiz working properly in SUSE.  I haven't tried Rosegarden yet (there's a lot of audio and JACK stuff to set up for it first) but even if that still won't work, Kubuntu's already working better than SUSE on my hardware.  Very satisfied.</description><category>KDE</category><category>Unix</category><category>alternatives</category><category>hacking</category><category>kubuntu</category><guid>http://milosophical.me/blog/2007/05/16/kubuntu-kaboose.html</guid><pubDate>Tue, 15 May 2007 22:53:57 GMT</pubDate></item><item><title>Setting up multiple Java VMs under Cygwin</title><link>http://milosophical.me/blog/2007/03/09/setting-up-multiple-java-vms-under-cygwin.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;It is useful to have different versions of the JVM installed, for a number of reasons:
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;Different optimisation features from different JVM implementations&lt;/li&gt;
	&lt;li&gt;Different language features from different JVM versions&lt;/li&gt;
	&lt;li&gt;Java classes compiled with “&lt;em&gt;Tiger&lt;/em&gt;” won't run in “&lt;em&gt;Mantis&lt;/em&gt;”…&lt;/li&gt;
&lt;/ul&gt;

It is also useful to be able to quickly switch between installed JREs/JDKs depending on the task at hand.



If I'm hacking in Linux, the &lt;a title="JPackage home page" href="http://milosophical.me/blog/2007/03/09/www.jpackage.org"&gt;JPackage&lt;/a&gt; project provides a much &lt;a title="JPackage's install/location/naming policy facilitates use of the udate-alternative mechanism" href="http://www.jpackage.org/policy.php"&gt;nicer &lt;/a&gt;&lt;a title="Debian's update-alternatives solution explained" href="http://www.debian.org/doc/debian-policy/ap-pkg-alternatives.html"&gt;solution &lt;/a&gt;to this problem, and the Linux distro' I'm using (SUSE 10.0) &lt;a title="Instruction for installing Java on openSUSE" href="http://en.opensuse.org/Installing_Sun's_Java_on_SUSE_Linux"&gt;uses JPackage&lt;/a&gt;. It'd be nice if there was an &lt;code&gt;update-alternatives&lt;/code&gt; for Cygwin, but since there isn't I've come up with this hack.



&lt;!--more--&gt;



&lt;hr&gt;&lt;strong&gt;2007-03-09T08:06+1100 - Update: Neater &lt;code&gt;JVersion&lt;/code&gt; code&lt;/strong&gt; I've recently upgraded to &lt;em&gt;Mustang&lt;/em&gt; and noticed that this broke my function, since it installs to a different base directory &lt;em&gt;again&lt;/em&gt;… So here is a new version that hopefully covers off future default directory names that Sun comes up with for &lt;em&gt;Dolphin&lt;/em&gt; and the Open Source releases.

&lt;pre&gt;&lt;code&gt;

# Path variables

if [ x"$X_PATH_NO_JAVA" = x ]; then
    export X_PATH_NO_JAVA=~/bin:$PATH     # save path without JAVA, for future switches
fi



if [ x"$JAVA_BASE" = x ]; then
    JAVA_BASE=d:\\java    # default if not set in Windows
fi



# Functions

function JVersion() {
    # Select a Java Development Kit to use.
    # This provides similar functionality in Cygwin, to the
    # updatealternatives command of Debian/SuSE linux.
    #
    # Note, different releases have different standard dirs,
    # so we just look for "k" which seems to be the
    # thing they still have in common.  Also the sed scripts
    # which pull out the version number installed, for
    # reporting, must be specific for each release...

    #Convert JAVA_BASE to Cygwin format
    export JAVA_BASE=`cygpath -up $JAVA_BASE`

    # Use function's argument to select, defaulting to Mantis
    case $1 in
        1.6 | 1.6.0 | 6.0 | 6 | mustang | Mustang | MUSTANG)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.6.0`
            JVERNUM=`echo $JAVA_VER | sed s/^jdk//g`
        ;;
        1.5 | 1.5.0 | 5.0 | 5 | tiger | Tiger | TIGER)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.5.0`
            JVERNUM=`echo $JAVA_VER | sed s/^j2sdk//g`
        ;;
        * | MANTIS)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.4.2`
            JVERNUM=`echo $JAVA_VER | sed s/^j2sdk//g`
        ;;
    esac

    #Set the JAVA_HOME variable (used by some Java programs, so
    #must be in Windows format for those programs to understand)
    export JAVA_HOME=`cygpath -wp $JAVA_BASE/$JAVA_VER`

    #Add the correct JDK runtime to Cygwin's path
    export PATH=$JAVA_BASE/$JAVA_VER/bin:$X_PATH_NO_JAVA

    #Report what happened
    echo Java Version: $JVERNUM
    echo Java Base: $JAVA_BASE
    echo "Java Home: $JAVA_HOME (`cygpath -up $JAVA_HOME`)"
}



#Now run it to set up initial Java environment:

JVersion &amp;gt; /dev/null

&lt;/code&gt;&lt;/pre&gt;

This is all you need now, no complicated set-up variables and such rubbish. You'll notice that the setup steps are now just to set &lt;code&gt;$X_PATH_NO_JAVA&lt;/code&gt; (save the &lt;code&gt;$PATH&lt;/code&gt;&lt;em&gt; without&lt;/em&gt; Java in it), and set up &lt;code&gt;$JAVA_BASE&lt;/code&gt; if necessary. Then after the function is declared and I run it to set a default Java environment for Cygwin (Still &lt;em&gt;Mantis&lt;/em&gt; for now, since my work is using it for a system I support).



Read on for old stuff and false-starts...



...



I have a shell function called &lt;code&gt;JVersion&lt;/code&gt; which you use to select the version of the JVM you want to use, and a bunch of environment variables to make it all work.  Here's how you use it:

&lt;blockquote&gt;

&lt;pre&gt;$ &lt;strong&gt;JVersion tiger&lt;/strong&gt;

Java Version: 1.5.0_04

Java Base: /cygdrive/d/java

Java Home: /cygdrive/d/java/j2sdk1.5.0_04

$ &lt;strong&gt;java -version

&lt;/strong&gt;java version "1.5.0_04"

Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_04-b05)

Java HotSpot(TM) Client VM (build 1.5.0_04-b05, mixed mode, sharing)

$

$ &lt;strong&gt;JVersion mantis

&lt;/strong&gt;Java Version: 1.4.2_05

Java Base: /cygdrive/d/java

Java Home: /cygdrive/d/java/j2sdk1.4.2_05

$ &lt;strong&gt;java -version

&lt;/strong&gt;java version "1.4.2_05"

Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_05-b04)

Java HotSpot(TM) Client VM (build 1.4.2_05-b04, mixed mode)

$&lt;/pre&gt;

&lt;/blockquote&gt;

When using Java from the command-line (DOS or Cygwin), you need to have the interpreter (for JRE) and development tools (for JDK) on the system search PATH. You also used to have to set the CLASSPATH for the JRE to find bootstrap and extension classes, but these are now found automatically via the System property "&lt;code&gt;sun.boot.class.path&lt;/code&gt;" and the Java Extension Mechanism. However, it's still useful to have a JAVA_HOME variable for some third-party tools, such as IDEs.



I've written a bash function which uses some control variables to allow easy switching of JVMs on Cygwin. It's still a bit of a hack, but I find it useful when I'm on Windows to work from the bash prompt as well as whatever IDE I'm hacking in.



The control variables are

&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;JAVA_BASE&lt;/code&gt; = the base directory where all the JVMs are installed. I put each JVM in it's own directory under &lt;code&gt;D:\java&lt;/code&gt;
This variable should be in the Windows environment, but it defaults to &lt;code&gt;d:\java&lt;/code&gt; in my &lt;code&gt;.bashrc&lt;/code&gt; if it was not set (i.e. I forgot to):

&lt;pre&gt;if [ x"$JAVA_BASE" = x ]; then
     JAVA_BASE=d:\\java    # default if not set in Windows
fi&lt;/pre&gt;

I'm sticking to DOS pathnames for this variable, as I intend to replicate this functionality with batch files one day, in case I'm mad enough to run Java from a Windows command shell.  Anyway, I then convert this to a Cygwin path with the following &lt;a title="$man 1 sed" href="http://linux.ctyme.com/man/man2933.htm"&gt;&lt;code&gt;sed&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt; and &lt;a title="$man 1 gawk" href="http://linux.ctyme.com/man/man0898.htm"&gt;&lt;code&gt;awk&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt; hack:

&lt;pre&gt;JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes

export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \\
                                  | sed 's/d://cygdrive/d/g'` # fix drive&lt;/pre&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_MANTIS&lt;/code&gt; = the version (without the release part) corresponding to “&lt;em&gt;Mantis&lt;/em&gt;”&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_TIGER&lt;/code&gt; = the version (without release) corresponding to “&lt;em&gt;Tiger&lt;/em&gt;”&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_VER&lt;/code&gt; = the specific version and release of the currently selected JVM (e.g. 1.5.0_04)
&lt;pre&gt;if [ x"$JAVA_MANTIS" = x ]; then
  export JAVA_MANTIS=`ls $JAVA_BASE | grep 1.4.2 \\
                                    | sed s/^j2sdk//g`
fi

if [ x"$JAVA_TIGER" = x ]; then
  export JAVA_TIGER=`ls $JAVA_BASE | grep 1.5.0 \\
                                   | sed s/^j2sdk//g`
fi

if [ x"$JAVA_VER" = x ]; then
  export JAVA_VER=$JAVA_MANTIS     # default if not set
fi&lt;/pre&gt;

&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt; = the install directory of the currently selected JVM (e.g. &lt;code&gt;d:\java\j2sdk1.4.2_05&lt;/code&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;X_PATH_NO_JAVA&lt;code&gt; = the system search path, without a JVM&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;&lt;code&gt;PATH = the system search path&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

The aim is to set JAVA_HOME and PATH so that the Java tools can be found. They are set using the previous variables:

&lt;pre&gt;export JAVA_HOME=$JAVA_BASE/j2sdk$JAVA_VER

if [ x"$X_PATH_NO_JAVA" = x ]; then
  export X_PATH_NO_JAVA=~/bin:$PATH  # save path without JAVA
fi

export PATH=$JAVA_HOME/bin:$X_PATH_NO_JAVA&lt;/pre&gt;

So, the above code is run inside my &lt;code&gt;.bashrc&lt;/code&gt;, which takes care of finding the installed JVMs and setting Mantis as the default to use. But what about switching? Well, here's the shell function:

&lt;blockquote&gt;

&lt;pre&gt;function JVersion() {
    case $1 in
        1.5 | 1.5.0 | 5.0 | 5 | tiger | Tiger | TIGER)
            export JAVA_VER=$JAVA_TIGER
        ;;
        *)
        export JAVA_VER=$JAVA_MANTIS
        ;;
    esac

    JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes
    export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \
                                      | sed 's/d://cygdrive/d/g'` # fix drive
    export JAVA_HOME=$JAVA_BASE/j2sdk$JAVA_VER
    export PATH=$JAVA_HOME/bin:$X_PATH_NO_JAVA

    echo Java Version: $JAVA_VER
    echo Java Base: $JAVA_BASE
    echo Java Home: $JAVA_HOME
}&lt;/pre&gt;

&lt;/blockquote&gt;

You may have noticed that this hack is rather brittle. It works well, but only so long as you follow these steps:

&lt;ol&gt;
	&lt;li&gt;Install your Javas on your &lt;code&gt;D:&lt;/code&gt; drive (or you have to fix all of the &lt;code&gt;sed&lt;/code&gt; scripts!)&lt;/li&gt;
	&lt;li&gt;Have a “base” directory, such as &lt;code&gt;D:\java&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Have a Windows environment variable called &lt;code&gt;JAVA_BASE&lt;/code&gt; equal to the “base” directory&lt;/li&gt;
	&lt;li&gt;Install your Javas each in a sub-directory of your “base”, called &lt;code&gt;j2sdk&lt;em&gt;w&lt;/em&gt;.&lt;em&gt;x&lt;/em&gt;.&lt;em&gt;y&lt;/em&gt;_&lt;em&gt;z&lt;/em&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

Additionally it only caters for a &lt;em&gt;single&lt;/em&gt; release of each Java version, &lt;em&gt;and&lt;/em&gt; only for &lt;a title="Sun's internal J2SE release code names" href="http://java.sun.com/j2se/codenames.html"&gt;Java versions&lt;/a&gt; “&lt;em&gt;Mantis&lt;/em&gt;” (1.4.2) and “&lt;em&gt;Tiger&lt;/em&gt;” (1.5.0). If you want to install “&lt;em&gt;Mustang&lt;/em&gt;” and switch to it, you'll need to add a &lt;code&gt;JAVA_MUSTANG&lt;/code&gt; variable, equal to 1.6.0 and also add a case for 1.6.0 to both the &lt;code&gt;JAVA_VER&lt;/code&gt; setup code and the &lt;code&gt;JVersion&lt;/code&gt; &lt;code&gt;case&lt;/code&gt; statement… ugly, but I haven't come up with a more elegant solution yet.  Ultimately I'd like to make a proper replacement for &lt;code&gt;update-alternatives&lt;/code&gt;, but since symlinks will only work for the Cygwin tools, and not the Java tools themselves, it seems unlikely I'll come up with a nicer solution.

&lt;h3&gt;A note about paths in Java on Cygwin:&lt;/h3&gt;

This is noted in the Cygwin docs somewhere I think, but just a reminder: &lt;code&gt;java.exe&lt;/code&gt;, &lt;code&gt;javac.exe&lt;/code&gt;, etc. are Win32 programs, and are not linked to the Cygwin DLLs in any way. So &lt;em&gt;always&lt;/em&gt; they will need DOS style paths (&lt;code&gt;D:\&lt;em&gt;somedir&lt;/em&gt;\&lt;em&gt;etc&lt;/em&gt;&lt;/code&gt;). They won't understand Cygwin's &lt;code&gt;/cygdrive/d/&lt;em&gt;whatever&lt;/em&gt;&lt;/code&gt;. Also as I just alluded to, any Cygwin links will not be followed by the Java tools, for the same reason.  In &lt;a title="$man 1 bash" href="http://linux.ctyme.com/man/man0210.htm"&gt;&lt;code&gt;bash&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt;, you'll need to escape the sloshes if you're setting the classpath on the command line:

&lt;pre&gt;java -classpath D:\\\\java\\\\special-classes\\\\somefile.jar MyClass&lt;/pre&gt;

Since java transposes the &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; characters itself, it &lt;em&gt;may&lt;/em&gt; be possible to do the following:

&lt;pre&gt;java -classpath D:/java/special-classes/somefile.jar MyClass&lt;/pre&gt;

But I haven't tested it…



&lt;hr&gt;&lt;strong&gt;2006-06-17T16:39+1000 - Update: Cygwin's &lt;code&gt;cygpath&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command&lt;/strong&gt; I should have seen this before spending so long playing with sed and sloshes…Cygwin's &lt;code&gt;cygpath&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command can be used to fix the Unix/DOS path stuff, much simpler than mucking about with &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt;.  So in the above, instead of code like this:

&lt;pre&gt;JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes

export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \\
                                  | sed 's/d://cygdrive/d/g'` # fix drive&lt;/pre&gt;
… that mess can be replaced replaced with this:

&lt;pre&gt;&lt;code&gt;export JAVA_BASE=`cygpath -up $JAVA_BASE`&lt;/code&gt;&lt;/pre&gt;

… (using back-quotes, or the &lt;code&gt;$()&lt;/code&gt; notation if you prefer).  Similarly, to run Java with a classpath specified in a Cygwin format (i.e. from a Cygwin script or prompt):

&lt;pre&gt;&lt;code&gt;java -classpath `cygpath -wp /cygdrive/d/java/special-classes/somefile.jar` MyClass&lt;/code&gt;&lt;/pre&gt;</description><category>alternatives</category><category>code</category><category>cygwin</category><category>hacking</category><category>java</category><category>shell</category><category>sloshes</category><guid>http://milosophical.me/blog/2007/03/09/setting-up-multiple-java-vms-under-cygwin.html</guid><pubDate>Thu, 08 Mar 2007 21:21:02 GMT</pubDate></item></channel></rss>