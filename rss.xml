<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Milosophical Me</title><link>http://milosophical.me/</link><description>A geek's notebook</description><atom:link href="http://milosophical.me/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:sinewalker@gmail.com"&gt;Michael Lockhart&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0"
     src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png"/&gt;&lt;/a&gt;
</copyright><lastBuildDate>Sun, 19 Aug 2018 21:08:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Every Rose Has Its … Prickle</title><link>http://milosophical.me/blog/2018/every-rose-has-its-prickle.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;You may be aware:  &lt;a href="https://en.wikipedia.org/wiki/Rose"&gt;roses&lt;/a&gt; don't have &lt;a href="https://en.wikipedia.org/wiki/Thorns,_spines,_and_prickles#Thorns"&gt;thorns&lt;/a&gt;, they have &lt;a href="https://en.wikipedia.org/wiki/Thorns,_spines,_and_prickles#Prickles"&gt;prickles&lt;/a&gt;.  This is a fact that the band &lt;a href="https://en.wikipedia.org/wiki/Poison_(American_band)"&gt;Poison&lt;/a&gt; were either unaware of, or (wisely) chose to overlook in their song &lt;a href="https://en.wikipedia.org/wiki/Every_Rose_Has_Its_Thorn"&gt;Every Rose Has Its Thorn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Imagine if they hadn't overlooked it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every rose has its prickle&lt;/p&gt;
&lt;p&gt;Just like every night, we gotta trickle&lt;/p&gt;
&lt;p&gt;Just like every cowboy has a soft place to tickle&lt;/p&gt;
&lt;p&gt;Every rose has its prickle.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><category>lyrics</category><category>parody</category><category>silly</category><guid>http://milosophical.me/blog/2018/every-rose-has-its-prickle.html</guid><pubDate>Sun, 19 Aug 2018 11:40:29 GMT</pubDate></item><item><title>Converting latin-1 To utf-8 with Python</title><link>http://milosophical.me/blog/2018/latin1-to-utf8.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Tonight I finally converted all the Glossary pages in my mirror of the &lt;a href="http://catb.org/~esr/jargon"&gt;Jargon File&lt;/a&gt; into Unicode (utf-8 encoding) so that they will transmit and display properly from GitHub Pages (or any other modern web server).  It was a fairly trivial thing to do in the end, but I am likely to need to repeat this for other things at work, so I'm blogging it.&lt;/p&gt;
&lt;p&gt;The Jargon File was &lt;a href="http://milosophical.me/jargon/news.html"&gt;converted into XML-Dockbook and Unicode&lt;/a&gt; for version 4.4.0, but ESR only converted the front- and back-matter, not the Glossary entries (i.e. the actual lexicon).  Those are still &lt;em&gt;latin-1&lt;/em&gt; (&lt;a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1"&gt;ISO-8859-1&lt;/a&gt;). And although the HTML rendition begins with the correct header declaring this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="ISO-8859-1" standalone="no"?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The pages are actually served from catb.org as &lt;a href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; (&lt;a href="https://en.wikipedia.org/wiki/UTF-8"&gt;utf-8&lt;/a&gt;).  For instance, compare &lt;a href="http://www.catb.org/~esr/jargon/html/0/dev-null.html"&gt;/dev/null on catb.org&lt;/a&gt; with &lt;a href="http://milosophical.me/jargon/html/0/dev-null.html"&gt;my mirror of /dev/null&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/latin1-to-utf8.html"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>character-encoding</category><category>code</category><category>codec</category><category>iso-8859-1</category><category>jargon</category><category>python</category><category>unicode</category><category>utf-8</category><guid>http://milosophical.me/blog/2018/latin1-to-utf8.html</guid><pubDate>Sat, 21 Jul 2018 13:09:46 GMT</pubDate></item><item><title>Journald experiments - Testing systemd's logger: speed and buffering</title><link>http://milosophical.me/blog/2018/journald-experiments-0.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been having good natured arguments at work about whether it's the &lt;em&gt;End of the World&lt;/em&gt; that we are at last switching away from &lt;em&gt;Scientific Linux 6&lt;/em&gt; and it's &lt;a href="https://en.wikipedia.org/wiki/UNIX_System_V"&gt;System V&lt;/a&gt; style &lt;a href="https://en.wikipedia.org/wiki/Init"&gt;init&lt;/a&gt; scripts, to &lt;em&gt;CentOS 7&lt;/em&gt;, which uses &lt;a href="https://freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;My own opinion is that &lt;em&gt;systemd is pretty &lt;a href="http://milosophical.me/jargon/html/C/cuspy.html"&gt;cuspy&lt;/a&gt;&lt;/em&gt;.  It's not perfect, but nor is it some great hulking monolithic monster come to destroy the Unix Way in the Linux world.  It offers many worthwhile improvements and I've enjoyed using it in openSUSE for years now. I look forward to switching away from the hair-ball of &lt;em&gt;wet&lt;/em&gt; SysV init scripts with clumsy precedent semantics and manual service recovery.&lt;/p&gt;
&lt;p&gt;Now, I don't want to throw my hat into the ring on the pro's and con's of systemd having replaced the start-up infrastructure (and &lt;em&gt;a lot&lt;/em&gt; of other systems besides) on Linux-based operating systems.  Enough has been said already on that front, by many more experienced than I, and further argument is pointless:  whichever camp you're in, you won't be convinced of the other sides point of view by now.&lt;/p&gt;
&lt;p&gt;However there is &lt;em&gt;one&lt;/em&gt; argument against systemd that I'm not so sure about: &lt;a href="http://0pointer.de/blog/projects/journal-submit.html"&gt;journald&lt;/a&gt; and it's past issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;alleged buffering of logs&lt;/strong&gt;, making diagnostics and debugging on time-critical services difficult or impossible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;binary log files&lt;/strong&gt; which can be corrupted, and then not useful thereafter (because they're binary)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile storage&lt;/strong&gt;, so that your logs are gone when you want them the most: after an unplanned reboot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll be spending a few days experimenting with &lt;code&gt;journald&lt;/code&gt; in these areas, to see if it's as bad now as it was five years ago when &lt;a href="https://bbs.archlinux.org/viewtopic.php?id=159090"&gt;concerns like these were being raised&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I want to look at the &lt;code&gt;journald&lt;/code&gt; daemon / &lt;code&gt;journalctl&lt;/code&gt; log viewer a bit, from the point of view of &lt;strong&gt;buffering output&lt;/strong&gt;, whether and where it could be occurring, and what the implications might be as a web sysop.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is a medium-long post, with about 23 minutes of terminal output recordings (in text, using &lt;a href="https://ascinnema.org"&gt;asciinema&lt;/a&gt;) and is about 2⅓MB to download. It's also about half-an-hour's read on top of that.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/journald-experiments-0.html"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>asciinema</category><category>code</category><category>experiments</category><category>journald</category><category>python</category><category>systemd</category><guid>http://milosophical.me/blog/2018/journald-experiments-0.html</guid><pubDate>Sat, 14 Jul 2018 11:32:16 GMT</pubDate></item><item><title>Password databases: Installing password-store on Android</title><link>http://milosophical.me/blog/2018/password-store-1.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;The final part of the password puzzle is getting my passwords into my pocket.  There are quite a few images in this post (about 2MB) as I describe setting up the system on Android, which involves a lot of steps, with screen-shots.&lt;/p&gt;
&lt;p&gt;Hold onto your hat, it's a bit of a fiddle.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/password-store-1.html"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>gpg</category><category>keybase</category><category>openkeychain</category><category>password-store</category><category>passwords</category><category>ssh</category><guid>http://milosophical.me/blog/2018/password-store-1.html</guid><pubDate>Sun, 24 Jun 2018 12:45:22 GMT</pubDate></item><item><title>Password databases: setting up password-store on a Unix computer</title><link>http://milosophical.me/blog/2018/password-store-0.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Having &lt;a href="http://milosophical.me/blog/2018/keepass-and-password-store.html"&gt;covered&lt;/a&gt; what &lt;a href="https://www.passwordstore.org/"&gt;pass&lt;/a&gt; is, why I'm using it, and the required supporting tools &lt;a href="https://gnupg.org/"&gt;gnupg&lt;/a&gt;, &lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt;, &lt;a href="https://www.openssh.com/"&gt;ssh&lt;/a&gt; and a &lt;a href="https://www.gitlab.com/"&gt;private git remote&lt;/a&gt;, it's time to go over how to put the system together.&lt;/p&gt;
&lt;p&gt;Setting it all up on a Unix computer is fairly straight-forward. Getting it onto an Android is a bit different.  So in this post I'll cover how the pieces of the system fit together, and then walk through setting it up on Unix.&lt;/p&gt;
&lt;p&gt;Synchronising your local password-store git repository with your remote store is done a bit differently depending if this is the &lt;em&gt;first&lt;/em&gt; time you're setting up the remote, or if you already have a remote and you wish to merge it into your new local. I'll cover that too.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/password-store-0.html"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>gitlab</category><category>gpg</category><category>keybase</category><category>pass</category><category>password-store</category><category>passwords</category><category>pgp</category><guid>http://milosophical.me/blog/2018/password-store-0.html</guid><pubDate>Sat, 23 Jun 2018 21:23:41 GMT</pubDate></item><item><title>Password databases: Migrating from KeePassX to Pass</title><link>http://milosophical.me/blog/2018/migrating-keepass-to-password-store.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;I spent some spare hours on the week-end playing with &lt;a href="https://play.google.com/store/apps/details?id=com.zeapo.pwdstore"&gt;Pass&lt;/a&gt;, importing my KeePassX database into password-store and synchronising it to a GitLab private repository.&lt;/p&gt;
&lt;p&gt;It's a little tricky to get it set up,  with a few moving parts, so I'm still experimenting. Here's what I've figured out so far.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/migrating-keepass-to-password-store.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>gpg</category><category>keepassx</category><category>keybase</category><category>password-store</category><category>passwords</category><category>ssh</category><guid>http://milosophical.me/blog/2018/migrating-keepass-to-password-store.html</guid><pubDate>Thu, 03 May 2018 12:00:22 GMT</pubDate></item><item><title>Password databases: from KeePassX to Unix password store</title><link>http://milosophical.me/blog/2018/keepass-and-password-store.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Passwords.  We all have a lot of them to remember — most of us have too many. How do you keep track of them all?&lt;/p&gt;
&lt;p&gt;Originally I used to just remember passwords for everything, like most people.  I soon found this doesn't scale past about 7 passwords and PINs.  Rather than use the same passwords everywhere, I started to keep a secret list of passwords, but it was a pain to keep that list with me, and what if it was discovered?&lt;/p&gt;
&lt;p&gt;After been keeping my passwords in a &lt;a href="https://gnupg.org/"&gt;GPG-encrypted&lt;/a&gt; text file for a few years, I then started using a &lt;a href="https://en.wikipedia.org/wiki/KeePassX"&gt;KeePassX&lt;/a&gt; database, and that's been pretty successful.  I sync the database to my phone so that I can have my passwords with me whenever needed, but it is a little bit clunky to use.&lt;/p&gt;
&lt;p&gt;At the recomendation from someone at work, I checked out &lt;a href="https://www.passwordstore.org/"&gt;pass&lt;/a&gt;, “the standard Unix password manager”.  It offers all the features I've been using from KeePassX for a few years now, only with much better syncronisation based upon git+ssh.&lt;/p&gt;
&lt;p&gt;Pass is also integrated into browsers, editors, and even a few operating systems, so it's potentially a lot less clunky and risky to use than how I was using KeePassX with passwords entered via the system clipboard.&lt;/p&gt;
&lt;p&gt;This post reviews my password management approaches to date and gives an overview of Pass.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/keepass-and-password-store.html"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>keepassx</category><category>pass</category><category>password-store</category><category>passwords</category><guid>http://milosophical.me/blog/2018/keepass-and-password-store.html</guid><pubDate>Sat, 28 Apr 2018 12:52:33 GMT</pubDate></item><item><title>Learning DVCS Workflow - 1</title><link>http://milosophical.me/blog/2018/git-checkout-ftw.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Tonight I learned a basic git trick that was not immediately obvious to me, but should have been, I guess.&lt;/p&gt;
&lt;p&gt;I've been switching &lt;a href="https://github.com/sinewalker/dotspacemacs/tree/develop"&gt;my Spacemacs&lt;/a&gt; back to the &lt;a href="https://github.com/sinewalker/dotspacemacs/"&gt;master branch&lt;/a&gt; to try trouble-shoot a performance issue I'm having on the Macintosh where it just hangs occasionally.  My master is tracking to Spacemacs master which is still at 0.200.13.  I haven't touched it in over a year, and there are some things that I wanted from my &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;I want to merge in the latest version of those few files, but not &lt;em&gt;everything&lt;/em&gt; on the branch, so a &lt;em&gt;merge&lt;/em&gt; is not the right operation.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/git-checkout-ftw.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>git</category><category>magit</category><category>merging</category><category>tip</category><guid>http://milosophical.me/blog/2018/git-checkout-ftw.html</guid><pubDate>Tue, 27 Mar 2018 11:16:00 GMT</pubDate></item><item><title>4-bit Rules of Computing, Part 4</title><link>http://milosophical.me/blog/2018/4-bits-part4.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Here is the fifth part of my &lt;a href="http://milosophical.me/tags/4-bit-rules.html"&gt;blog series&lt;/a&gt; expanding on my
&lt;a href="http://milosophical.me/pg/4-bit-rules.html"&gt;4-bit rules of computing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post: &lt;strong&gt;rules 7, 8, and 9&lt;/strong&gt;; which discuss &lt;strong&gt;testing and debugging&lt;/strong&gt;. They are all related in a way: having to do with making good-quality craft work. Because, as much as computer people like to &lt;em&gt;believe&lt;/em&gt; that we're "engineers" or that this is "computer science", &lt;a href="https://web.archive.org/web/20171221023913/https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/"&gt;we're not really&lt;/a&gt;.  We're crafts people, in a profession that's still very young and finding its roots and methods in order to be consistently successful.&lt;/p&gt;
&lt;p&gt;I'm definitely &lt;em&gt;not&lt;/em&gt; trying to pretend I'm an "engineer". 
For real &lt;em&gt;rigour&lt;/em&gt;, there is much more required than a few simple rules. But these are some realistic and humble rules in the area of testing that I aim to stick to.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/4-bits-part4.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>4-bit-rules</category><category>bugs</category><category>code</category><category>debugging</category><category>engineering</category><category>experiments</category><category>perfection</category><category>TDD</category><category>testing</category><category>tip</category><guid>http://milosophical.me/blog/2018/4-bits-part4.html</guid><pubDate>Fri, 23 Mar 2018 10:25:22 GMT</pubDate></item><item><title>Learning DVCS Workflow - 0</title><link>http://milosophical.me/blog/2018/learning-git-workflow-0.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;If you take look at the revision history for &lt;a href="https://github.com/sinewalker/dotfiles/commits/master"&gt;some of&lt;/a&gt; my &lt;a href="https://github.com/sinewalker/dotspacemacs/commits/master"&gt;projects&lt;/a&gt; on &lt;a href="https://github.com/sinewalker/sinewalker.github.io/commits/master"&gt;GitHub&lt;/a&gt;, you'll see that I have a fairly messy track-record!&lt;/p&gt;
&lt;p&gt;A few times I have successfully used &lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;'s ability to &lt;a href="https://magit.vc/manual/magit/Staging-and-Unstaging.html#Staging-and-Unstaging"&gt;interactively stage/unstage Hunks or parts of Hunks&lt;/a&gt;, to make my commits a bit more clean and sensible, but not always.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The real problem is&lt;/strong&gt;: I haven't been using Branches.  It's because I haven't studied how to use them effectively, and in the past they've been scary.&lt;/p&gt;
&lt;p&gt;But for the future, and especially for my dotfiles, I'd like to be able to read through the commits and make sense of them after. Also I'd like to be sure when I'm committing that I don't make any unplanned master changes and break things. &lt;/p&gt;
&lt;p&gt;I also tend to work by myself on these projects, but I'll often go on a tangent, or start a blog post and then put off finishing it while another, different idea is developed and maybe even published first.  Ideally I should be able to track these things separately.&lt;/p&gt;
&lt;p&gt;So I need to learn:  how to do revision control workflow with branches, &lt;strong&gt;properly&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/learning-git-workflow-0.html"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>git</category><category>magit</category><category>mercurial</category><category>subversion</category><guid>http://milosophical.me/blog/2018/learning-git-workflow-0.html</guid><pubDate>Sun, 18 Mar 2018 00:48:10 GMT</pubDate></item></channel></rss>