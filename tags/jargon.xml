<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Milosophical Me (jargon)</title><link>http://milosophical.me/</link><description></description><language>en</language><lastBuildDate>Fri, 30 Jan 2015 22:57:20 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>"generic" types: what's in a name?</title><link>http://milosophical.me/blog/2008/09/10/generic-types-whats-in-a-name.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;span&gt;I've been stumbling over Java's generic types for a while now...  I think I finally understand what my problem is:&lt;/span&gt;
&lt;p style="text-align:center;"&gt;They should be called &lt;strong&gt;specific &lt;/strong&gt;types, or &lt;em&gt;&lt;span&gt;parametrised&lt;/span&gt;&lt;/em&gt; &lt;em&gt;collections&lt;/em&gt;!&lt;/p&gt;



&lt;!--more--&gt;



I think the feature is called "Java generics" because when you use a collection, say &lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt;, that &lt;code&gt;List&lt;/code&gt; contains elements of parameterised type &lt;code&gt;&amp;lt;E&amp;gt;&lt;/code&gt;, a "generic type".  But the element type in the plain old-fashioned non-parametrised collection &lt;code&gt;List&lt;/code&gt; is also generic!  In fact the non-parametrised &lt;code&gt;List&lt;/code&gt; is more &lt;em&gt;generic&lt;/em&gt; than the "generic" version (it can contain elements of &lt;em&gt;any&lt;/em&gt; sub-class of &lt;code&gt;Object&lt;/code&gt;)!  The distinction is that the elements in a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; are all of one &lt;strong&gt;specific&lt;/strong&gt; type (&lt;code&gt;String&lt;/code&gt;), whereas the elements in a &lt;code&gt;List&lt;/code&gt; can be of any general type, and can even be of different types in the same &lt;code&gt;List&lt;/code&gt; collection (leading to problems that "Java generics" was invented to address).



&lt;span&gt;&lt;code&gt;&amp;lt;sarcasm&amp;gt;&lt;/code&gt;Gosh, what an epiphany.&lt;code&gt;&amp;lt;/sarcasm&amp;gt;&lt;/code&gt;&lt;/span&gt;



&lt;span&gt;If you're a Java guru this is nothing new, of course.  But that took me &lt;strong&gt;ages&lt;/strong&gt; to grasp.  I think I wasn't helped by the terminology.  &lt;/span&gt;In fact whenever I'm reading Java literature, it helps if I swap "generic" for "specific".  This makes much more sense to me.  Actually I already do word substitutions for much of the Java canon.  For instance:

&lt;ul&gt;
	&lt;li&gt;"class Foo is instantiated"
Translation: "a Foo object is created"&lt;/li&gt;
	&lt;li&gt;"invoke method X of class Y"
Translation: "send message X to a Y object",

or even "send class Y the X message"&lt;/li&gt;

&lt;/ul&gt;

&lt;span&gt;Probably the Java literature is strictly more "correct" or explicit, but it'd be much more clear and concise if people used the older &lt;span&gt;OOP&lt;/span&gt; words for things...&lt;/span&gt;</description><category>OOP</category><category>duh</category><category>generics</category><category>jargon</category><category>java</category><category>terminology</category><category>thoughts</category><guid>http://milosophical.me/blog/2008/09/10/generic-types-whats-in-a-name.html</guid><pubDate>Wed, 10 Sep 2008 04:00:37 GMT</pubDate></item></channel></rss>