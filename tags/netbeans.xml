<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Milosophical Me (netbeans)</title><link>http://milosophical.me/</link><description></description><language>en</language><lastBuildDate>Sat, 31 Jan 2015 22:30:13 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Dark colours in NetBeans</title><link>http://milosophical.me/blog/2010/05/12/dark-colours-in-netbeans.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;Okay I'm still on the hunt for the elusive dark colour look-and-feel for NetBeans.  I found this site that has &lt;a title="NetBeans - The dark side" href="http://www.mediabits.dk/php/netbeans-the-dark-side/" target="_blank"&gt;great information about the NimROD L&amp;amp;F&lt;/a&gt;.  This sets the widgets to a dark colour (or you could customise your own colours with NimROD).


Note that this is separate from the NetBeans colour themes which control editor colours. For that, I quite like &lt;a title="NetBeans Twilight Theme!" href="http://net.tutsplus.com/freebies/themes/netbeans-twilight-theme/" target="_blank"&gt;Twilight&lt;/a&gt; and &lt;a title="Aloha Color Theme for NetBeans 6.1" href="http://blog.huikau.com/2008/04/28/aloha-color-theme-for-netbeans-61/" target="_blank"&gt;Aloha&lt;/a&gt;, although each needs tweaking to fix highlight colours for things such as breakpoints and step colours, or for highlighting code differences. Still, it's a good start.&lt;/p&gt;</description><category>colour</category><category>hacking</category><category>look-and-feel</category><category>netbeans</category><guid>http://milosophical.me/blog/2010/05/12/dark-colours-in-netbeans.html</guid><pubDate>Wed, 12 May 2010 06:04:19 GMT</pubDate></item><item><title>Registering local DTDs or XML schemas with NetBeans</title><link>http://milosophical.me/blog/2009/05/12/registering-local-dtds-or-xml-schemas-with-netbeans.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;The NetBeans online help &lt;a title="NetBeans XML catalog help on Jiema" href="http://www.jiema.org/xref/netbeans/usersguide/javahelp/org/netbeans/modules/usersguide/xml/catalog/xmlcatalog_mount.html"&gt;describes the steps for registering a local DTD or XML file&lt;/a&gt; with NetBeans' &lt;em&gt;DTDs and XML Schemas Manager&lt;/em&gt;. It's succinct and to the point, but for the slow people in the room it's a bit confusing. So here's my tip for registering a local DTD file with NetBeans so that you can use NetBeans' awesome XML validation and completion features.


&lt;!--more--&gt;In my example, I'm trying to use NetBeans to validate an &lt;a title="Solaris SMF Quick start" href="http://www.sun.com/bigadmin/content/selfheal/smf-quickstart.jsp"&gt;SMF&lt;/a&gt; &lt;a title="Service development intro" href="http://www.sun.com/bigadmin/content/selfheal/sdev_intro.jsp"&gt;Manifest&lt;/a&gt;, which is an XML file defined by a &lt;code&gt;SYSTEM&lt;/code&gt; DTD called &lt;code&gt;service_bundle.dtd.1&lt;/code&gt;.  On Solaris 10 machines you can find a copy of the DTD file in &lt;code&gt;/usr/share/lib/xml/dtd/service_bundle.dtd.1&lt;/code&gt;, and most example SMF manifests that you can find &lt;a title="SMF Manifest Repository" href="http://www.blastwave.org/smf/manifests.php"&gt;on the Internet&lt;/a&gt; include the DOCTYPE like so:

&lt;/p&gt;&lt;pre&gt;&amp;lt;!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1"&amp;gt;&lt;/pre&gt;

If you run NetBeans on Solaris 10, I assume this will probably work out-of-the-box (though I haven't tried this...).  However for us hackers on other platforms, you need to copy this file down to your development machine, and then register it with NetBeans so that you can use it.



NetBeans' DTDs and XML Schemas Manager contains a collection of XML Schema Catalogues for a whole bunch of technologies. You'll want to add your local DTDs/Schemas to the &lt;strong&gt;User Catalog&lt;/strong&gt; (&lt;em&gt;sic&lt;/em&gt;), which is the only one that's read-write. Do the following:

&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;Tools &lt;/strong&gt;menu, &lt;strong&gt;DTDs and XML Schemas&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;Choose &lt;strong&gt;User Catalog [read-write] &lt;/strong&gt;from the list of &lt;em&gt;DTDs and XML Schemas&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;Press "&lt;strong&gt;Add Local DTD or Schema...&lt;/strong&gt;" button&lt;/li&gt;
	&lt;li&gt;In our example, the DOCTYPE reads:
&lt;pre&gt;SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1"&lt;/pre&gt;

So, we must map this SYSTEM ID  to a local URI on our development machine.  If it had said &lt;code&gt;PUBLIC "..."&lt;/code&gt; then we would map a PUBLIC ID instead.&lt;/li&gt;
	&lt;li&gt;Click the radio button for the relevant ID type (&lt;strong&gt;System ID&lt;/strong&gt; in our case)&lt;/li&gt;
	&lt;li&gt;Copy in the string ID from your XML file into the relevant field. Make sure you don't put in the double-quotes
&lt;span style="text-decoration:underline;"&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt;&lt;/span&gt; for a DTD that lives on the filesystem ID, like ours, &lt;strong&gt;the ID should begin with &lt;span style="color:#7744ee;"&gt;&lt;code&gt;file:&lt;/code&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;Click the "&lt;strong&gt;Browse...&lt;/strong&gt;" button and locate the DTD file you downloaded&lt;/li&gt;
	&lt;li&gt;Click "&lt;strong&gt;OK&lt;/strong&gt;"&lt;/li&gt;
&lt;/ol&gt;

You've now mapped the SYSTEM ID to your local copy of the DTD file for &lt;code&gt;service_bundle.dtd&lt;/code&gt;. If you try and validate the XML (&lt;strong&gt;Alt+Shift+F9&lt;/strong&gt;, or from the toolbar) it will stop complaining of a missing DTD and actually check your XML against the doctype definition.



I got mislead by the Recommendation (both in the online help and on the dialog box). It says that the "common solution for XML documents specified by DTD is using the Public ID -&amp;gt; URI mapping." It goes on to say that "System ID -&amp;gt; URI mapping can also be used to redirect the DTD location specified by SYSTEM ID", but I got confused by that point.



I also had a hard time working out that the System ID should begin with "file:".  The give-away that I didn't spot until later, was in the error message from the XML validator:

&lt;pre&gt;XML validation started.

Checking file:/D:/src/support/smf/emc/manifests/emc-fast-IndexServer.xml...

Referenced entity at "&lt;strong&gt;file:&lt;/strong&gt;/usr/share/lib/xml/dtd/service_bundle.dtd.1".

\usr\share\lib\xml\dtd\service_bundle.dtd.1 (The system cannot find the path specified) [30]

XML validation finished.&lt;/pre&gt;

Duh!  I could have also just copied that string &lt;em&gt;verbatim&lt;/em&gt;. Oh well, now I've blogged about it too, so hopefully I won't forget it next time :)</description><category>DTD</category><category>XML</category><category>hacking</category><category>howto</category><category>netbeans</category><category>tip</category><guid>http://milosophical.me/blog/2009/05/12/registering-local-dtds-or-xml-schemas-with-netbeans.html</guid><pubDate>Tue, 12 May 2009 00:27:55 GMT</pubDate></item><item><title>NetBeans 6.5 and Python</title><link>http://milosophical.me/blog/2008/11/24/netbeans-65-and-python.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;a title="NetBeans 6.5 release page" href="http://www.netbeans.org/community/releases/65/"&gt;NetBeans 6.5 is out&lt;/a&gt;! You can &lt;a title="Using Nimbus with NetBeans 6.5 -- noice!" href="http://mrhaki.blogspot.com/2008/11/start-netbeans-65-with-nimbus-look-and.html"&gt;run it with the&lt;/a&gt; &lt;a title="The Nimbus L&amp;amp;F project page" href="https://nimbus.dev.java.net/"&gt;Nimbus look and feel&lt;/a&gt; too! There's also an &lt;a title="NetBeans 6.5 Python -- Early Access" href="http://www.netbeans.org/features/python/index.html"&gt;Early Access plugin for Python&lt;/a&gt;. All very nice.


I recently had occasion to play with some Python at work (a small script to do some configurations, and I didn't want to do them in bash), so I took the time to get all of this set up. It's all so very easy and not worth writing about. However I thought that the i&lt;a title="NetBeans' integrated Jython debugger" href="http://wiki.netbeans.org/Python#section-Python-Debugger"&gt;nteractive debugger&lt;/a&gt; (which is &lt;em&gt;awesome&lt;/em&gt;, btw) has a small issue that needs resolving. Mean-time, here's a work-around.



&lt;!--more--&gt;&lt;strong&gt;The issue is&lt;/strong&gt;: the debugger (which runs in Jython) starts in the NetBeans 6.5 install directory, but the normal run-time is in the project's source directory. Normally this is not a problem, unless you're writing a script to pick up files from the current directory. If you just dump your data file in the project's source directory, then it'll work when you run it (with the F6 key), but not when you debug it (Ctrl-F5).



&lt;strong&gt;The work-around&lt;/strong&gt;:  The debugger is interactive and includes a Jython shell which is integrated into your debugging context (so cool)! Upon starting the debugger, your can just issue these commands:

&lt;code&gt; &lt;/code&gt;

&lt;pre style="padding-left:30px;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;strong&gt;import os, sys&lt;/strong&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;strong&gt;os.chdir(os.path.dirname(sys.argv[0]))&lt;/strong&gt;&lt;/pre&gt;

This will set the CWD for the current debug session to the directory where your script file is. That's where the CWD is set when you run scripts normally with the F6 key.



&lt;strong&gt;The solution&lt;/strong&gt;: I've sent an &lt;a title="NetBeans Issue 153733" href="http://www.netbeans.org/issues/show_bug.cgi?id=153733"&gt;enhancement request&lt;/a&gt; to the Python-IDE team in &lt;a title="Python debugger" href="http://www.netbeans.org/issues/buglist.cgi?Submit+query=Submit+query&amp;amp;component=python&amp;amp;subcomponent=debugger&amp;amp;issue_status=NEW&amp;amp;issue_status=STARTED&amp;amp;issue_status=REOPENED&amp;amp;email1=&amp;amp;emailtype1=exact&amp;amp;emailassigned_to1=1&amp;amp;email2=&amp;amp;emailtype2=exact&amp;amp;emailreporter2=1&amp;amp;issueidtype=include&amp;amp;issue_id=&amp;amp;changedin=&amp;amp;votes=&amp;amp;chfieldfrom=&amp;amp;chfieldto=Now&amp;amp;chfieldvalue=&amp;amp;short_desc=&amp;amp;short_desc_type=substring&amp;amp;long_desc=&amp;amp;long_desc_type=substring&amp;amp;issue_file_loc=&amp;amp;issue_file_loc_type=substring&amp;amp;status_whiteboard=&amp;amp;status_whiteboard_type=substring&amp;amp;keywords=&amp;amp;keywords_type=anytokens&amp;amp;field0-0-0=noop&amp;amp;type0-0-0=noop&amp;amp;value0-0-0=&amp;amp;cmdtype=doit&amp;amp;newqueryname=&amp;amp;order=Reuse+same+sort+as+last+time"&gt;NetBeans' issue tracker&lt;/a&gt;. I'm not sure where the CWD should be set in the general case, but probably it should be in &amp;lt;project-base&amp;gt;/src to be consistent with the normal runtime.



&lt;strong&gt;2009-01-11 Update&lt;/strong&gt;: The&lt;a href="http://www.netbeans.org/issues/show_bug.cgi?id=153733"&gt; issue has been fixed&lt;/a&gt;! Awesome work by jymen (Jean-Yves Mengant). I'll have to &lt;a title="Building the NB Python plug-in from source" href="http://wiki.netbeans.org/NbPythonHgBuild"&gt;check out a recent build&lt;/a&gt; from trunk and give it a whirl!</description><category>code</category><category>hacking</category><category>netbeans</category><category>python</category><category>tip</category><guid>http://milosophical.me/blog/2008/11/24/netbeans-65-and-python.html</guid><pubDate>Mon, 24 Nov 2008 01:08:42 GMT</pubDate></item><item><title>Switching to Java JDK 6u10</title><link>http://milosophical.me/blog/2008/10/30/switching-to-java-jdk-6u10.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I've been using 6u10 beta for a while and keeping 6u3 as my main JDK. It's also the default JDK for NetBeans but now that update 10 of &lt;em&gt;Mustang &lt;/em&gt;is out of beta, it's time for me to ditch 6u3 and swtich to 6u10 final.
&lt;!--more--&gt;

This is fairly straight forward. Here's what I did:

&lt;/p&gt;&lt;ol&gt;
	&lt;li&gt;Install JDK 6u10 (it'll find 6u10b and offer to remove it)&lt;/li&gt;
	&lt;li&gt;Start NetBeans, add the new 6u10 and remove the (now missing) 6u10b java platforms. Do this from the &lt;strong&gt;Tools &amp;gt; Java Platforms&lt;/strong&gt; menu&lt;/li&gt;
	&lt;li&gt;To change the default JDK (which is the one running NetBeans itself)
&lt;ol&gt;
	&lt;li&gt;edit &lt;code&gt;/&lt;em&gt;path&lt;/em&gt;/&lt;em&gt;to&lt;/em&gt;/&lt;em&gt;NetBeans&lt;/em&gt;/etc/netbeans.conf&lt;/code&gt; (you can do this in NB if you like)&lt;/li&gt;
	&lt;li&gt;change the &lt;strong&gt;&lt;code&gt;netbeans_jdkhome&lt;/code&gt;&lt;/strong&gt; property to be the path to your 6u10. On my Windows machine, this is &lt;code&gt;"D:\Java\jdk1.6.0_10"&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Restart NetBeans&lt;/li&gt;
&lt;/ol&gt;

&lt;/li&gt;
	&lt;li&gt;(optional) Uninstall your other jdk6 and remove it from NetBeans' list.&lt;/li&gt;
&lt;/ol&gt;

More tips for &lt;code&gt;netbeans.conf&lt;/code&gt; can be found on the &lt;a title="NetBeans FAQ on netbeans.conf" href="http://wiki.netbeans.org/FaqNetbeansConf"&gt;NetBeans Community Wiki&lt;/a&gt;.



My policy is to keep around only the latest stable update of each JDK, so I still have 1.4.2_17 and 1.5.0_15, in addition to (now) 1.6.0_10. Mainly this is because I still use 1.4.2 for work and 1.5.0 for testing. But there's no point in keeping two updates of the same version because their APIs are the same.



Same goes for the javadoc: it shouldn't have changed between 1.6.0 and 1.6.0_10 so I haven't bothered to check it or to download a newer copy. I also keep (zipped) javadocs for 1.4.2 and 1.5.0.</description><category>hacking</category><category>java</category><category>netbeans</category><category>tip</category><guid>http://milosophical.me/blog/2008/10/30/switching-to-java-jdk-6u10.html</guid><pubDate>Wed, 29 Oct 2008 22:52:21 GMT</pubDate></item><item><title>NetBeans turns 10</title><link>http://milosophical.me/blog/2008/10/21/netbeans-turns-10.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;It's &lt;a title="NetBeans 10th Birthday Celebration" href="http://www.netbeans.org/birthday/"&gt;NetBeans' 10th birthday&lt;/a&gt; and to celebrate I thought I'd write a quick blog post about how I use the NetBeans IDE to develop &lt;a title="Dvorak decoder program" href="http://sinewalker.wordpress.com/2008/08/15/project-dvorcode/"&gt;Dvorcode&lt;/a&gt;.


&lt;!--more--&gt;If you spend any longer than about 5 minutes at my blog you'll quickly discover than I'm in the emacs camp of the perpetual editor holy wars. So naturally when I started to hack away on Dvorcode, emacs was my first choice. But I quickly "upgraded" to NetBeans because:

&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;I'm time-poor and don't have time to waste setting up my tools    (Emacs and Eclipse are both great general tools, but you have to set them up first, which is tedious on Eclipse, and orders of magnitude worse for Emacs if you want to do more than M-x compile for Java).&lt;/li&gt;
	&lt;li&gt;I wanted a GUI for Dvorcodebut didn't want to wrestle withContainers and bindings. I just wanted to draw my interface in a form editor and be done with it.&lt;/li&gt;
	&lt;li&gt;I wanted a graphical debugger, so that pretty much killed emacs&lt;/li&gt;
	&lt;li&gt;I wanted Project files on SourceForge that other hackers could use fairly quickly, so a custom tool-chain is out of the question anyway&lt;/li&gt;
&lt;/ul&gt;

So after I hacked together my Dvorcode class in emacs, I moved to NetBeans to add all the things to make it a working application such as automatic tests, a CLI and a GUI.



I found that migrating code into NetBeans is very easy, especially as I only had one class anyway. But once I had a skeleton project set up, NetBeans made all the tedious chores bareable and some, like the GUI building, were actually fun! It freed my time up to try some experimental elements such as a text scroller that scrolls up instead of down when you insert text into it.



Also the built-in SVNsupport made working with my SourceForge repo a snap, and the JUnittests give me heaps of confidence to play around with the code, using NetBeans' Refactor function to change how the classes are divided up knowing that my tests will catch me if I break something along the way.



I even used NetBeans' "local history" feature to get me out of a bind when I accidentally updated my code from the wrong SVN repo (I use two repo's as I mentioned in a &lt;a title="Cascaded SVN" href="http://sinewalker.wordpress.com/2008/08/21/cascaded-revision-control-strategy/"&gt;previous post&lt;/a&gt;).



So, having used NetBeans, Eclipse and Emacs, which is my favourite? I still live in Emacs, and it's the first thing I reach for when I want to hack together a quick class. It's editing features just can't be beaten. But for a project of more than a handful of files, you either need &lt;a title="Collection of Emacs Development Environment Tools" href="http://cedet.sourceforge.net/"&gt;CEDET&lt;/a&gt; (which I &lt;em&gt;still&lt;/em&gt; haven't figured out how to install), or a "normal" IDE like the other two.



I use Eclipse at work as that is what the team leads seem to choose. It's okay, but as I said, it's a pain to set up. We actually use multiple installs of the IDE on our development workstations, to get around different configurations needed for different projects. That's a terrible kludge, but nobody here has time to figure out how to do it "properly".



So I guess that NetBeans is my favourite for projects larger than a few files, or to be worked on by more than just myself. And even for my own projects if they warrant a build system like Ant.</description><category>IDE</category><category>development</category><category>dvorcode</category><category>hacking</category><category>netbeans</category><guid>http://milosophical.me/blog/2008/10/21/netbeans-turns-10.html</guid><pubDate>Tue, 21 Oct 2008 02:25:15 GMT</pubDate></item></channel></rss>