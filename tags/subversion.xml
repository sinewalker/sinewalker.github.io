<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Milosophical Me (Posts about subversion)</title><link>http://milosophical.me/</link><description></description><atom:link href="http://milosophical.me/tags/subversion.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:sinewalker@gmail.com"&gt;Michael Lockhart&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0"
     src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png"/&gt;&lt;/a&gt;
</copyright><lastBuildDate>Tue, 22 Dec 2020 04:51:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Learning DVCS Workflow - 0</title><link>http://milosophical.me/blog/2018/learning-git-workflow-0.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;If you take look at the revision history for &lt;a href="https://github.com/sinewalker/dotfiles/commits/master"&gt;some of&lt;/a&gt; my &lt;a href="https://github.com/sinewalker/dotspacemacs/commits/master"&gt;projects&lt;/a&gt; on &lt;a href="https://github.com/sinewalker/sinewalker.github.io/commits/master"&gt;GitHub&lt;/a&gt;, you'll see that I have a fairly messy track-record!&lt;/p&gt;
&lt;p&gt;A few times I have successfully used &lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;'s ability to &lt;a href="https://magit.vc/manual/magit/Staging-and-Unstaging.html#Staging-and-Unstaging"&gt;interactively stage/unstage Hunks or parts of Hunks&lt;/a&gt;, to make my commits a bit more clean and sensible, but not always.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The real problem is&lt;/strong&gt;: I haven't been using Branches.  It's because I haven't studied how to use them effectively, and in the past they've been scary.&lt;/p&gt;
&lt;p&gt;But for the future, and especially for my dotfiles, I'd like to be able to read through the commits and make sense of them after. Also I'd like to be sure when I'm committing that I don't make any unplanned master changes and break things. &lt;/p&gt;
&lt;p&gt;I also tend to work by myself on these projects, but I'll often go on a tangent, or start a blog post and then put off finishing it while another, different idea is developed and maybe even published first.  Ideally I should be able to track these things separately.&lt;/p&gt;
&lt;p&gt;So I need to learn:  how to do revision control workflow with branches, &lt;strong&gt;properly&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/learning-git-workflow-0.html"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>git</category><category>magit</category><category>mercurial</category><category>subversion</category><guid>http://milosophical.me/blog/2018/learning-git-workflow-0.html</guid><pubDate>Sun, 18 Mar 2018 00:48:10 GMT</pubDate></item><item><title>Cascaded revision control strategy</title><link>http://milosophical.me/blog/2008/08/21/cascaded-revision-control-strategy.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Okay, this isn't rocket-science, and in fact it's not even my idea (heard it on the &lt;a title="Free/Libré Open Source Software POD casts" href="http://twit.tv/FLOSS"&gt;FLOSS&lt;/a&gt; &lt;a title="Git" href="http://twit.tv/floss19"&gt;POD about Git&lt;/a&gt;). A problem with centralised repository systems such as Subversion (which is used on SourceForge) is that you need network access to do many things, and also to just save your work. You can't do commits to the repo' while on the train, for instance (which is where I do most of my hacking).
&lt;/p&gt;
&lt;p&gt;
One option is to switch to a distributed revision system, such as &lt;a title="The Git home page" href="http://git.or.cz/"&gt;Git&lt;/a&gt; or &lt;a title="The Hg home page" href="http://www.selenic.com/mercurial/wiki/"&gt;Mercurial&lt;/a&gt;.  I may do that some day, but right now is not a good time for me to be learning a new revision system. Plus to have SourceForge host my project in Hg (for instance) means installing it myself and &lt;a title="How to hose a Hg project on SourceForge" href="http://www.selenic.com/mercurial/wiki/index.cgi/MercurialOnSourceforge"&gt;blah-blah-blah&lt;/a&gt;. Then there's IDE integration to consider...
&lt;/p&gt;

&lt;p&gt;
I want to have my cake and eat it too.
&lt;/p&gt;


&lt;p&gt;&lt;a href="http://milosophical.me/blog/2008/08/21/cascaded-revision-control-strategy.html"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>hacking</category><category>subversion</category><category>svn</category><category>tip</category><guid>http://milosophical.me/blog/2008/08/21/cascaded-revision-control-strategy.html</guid><pubDate>Thu, 21 Aug 2008 00:45:24 GMT</pubDate></item></channel></rss>