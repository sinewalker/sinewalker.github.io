<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Milosophical Me (code)</title><link>http://milosophical.me/</link><description></description><language>en</language><lastBuildDate>Fri, 30 Jan 2015 22:57:20 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using Emacs' EasyPG in text terminals</title><link>http://milosophical.me/blog/2011/03/17/using-emacs-easypg-in-text-terminals.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;There is a bug in the integration between Emacs' EasyPG and the "new" GnuPG2 that causes Emacs to not load &lt;code&gt;.gpg&lt;/code&gt; files when running in a text terminal.  It's being worked on, apparently, but in the mean-time, here is how to fix it.


&lt;!--more--&gt;



The only solution I've found that works is to install a copy of GnuPG1 concurrent with the new GnuPG2.  They can live happily side-by-side.  Once you've done that, you need to tell EasyPG to use the old program rather than the new one. Full details are on the &lt;a href="http://www.emacswiki.org/emacs/EasyPG"&gt;Emacs Wiki&lt;/a&gt;, here it is in a nutshell:

&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;You can find an RPM package of GnuPG1 for openSUSE on the &lt;a title="gpg1" href="https://build.opensuse.org/package/binary?arch=i586&amp;amp;filename=gpg1-1.4.9-2.1.i586.rpm&amp;amp;package=gpg1&amp;amp;project=security%3Aprivacy&amp;amp;repository=openSUSE_11.2"&gt;openSUSE Build Service&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Once installed, you need to customize the variable &lt;code&gt;&lt;strong&gt;epg-gpg-program&lt;/strong&gt;&lt;/code&gt;.  Either use &lt;code&gt;M-x customize&lt;/code&gt; to set it for all future sessions, or see my code snippet below that I put in my start-up scripts.  It should be set to the value &lt;em&gt;"/usr/bin/gpg1"&lt;/em&gt; (or wherever &lt;code&gt;gpg1&lt;/code&gt; is installed on your platform)&lt;/li&gt;
	&lt;li&gt;Now when EasyPG opens a &lt;code&gt;.gpg&lt;/code&gt; file, it will prompt for the passphrase in the Emacs minibuffer, instead of trying to use the &lt;code&gt;gpg-agent&lt;/code&gt; and calling the &lt;code&gt;pinentry&lt;/code&gt; program (which causes Emacs to hang in text mode)&lt;/li&gt;
&lt;/ul&gt;

 



If you like to use the gpg agent and graphical pinentry programs and only want to override GnuPG2 with GnuPG1 when running Emacs in a text terminial, then you can put code like this in your Emacs start-up (mine goes in &lt;code&gt;~/.emacs.d/&amp;lt;username&amp;gt;.el&lt;/code&gt; because I use the &lt;a href="https://github.com/technomancy/emacs-starter-kit"&gt;Emacs Starter Kit&lt;/a&gt;):



&lt;blockquote&gt;&lt;code&gt;

&lt;pre&gt;&lt;span style="color:#7f7f7f;"&gt;(&lt;/span&gt;&lt;span style="color:#00ffff;"&gt;when&lt;/span&gt; &lt;span style="color:#7f7f7f;"&gt;(&lt;/span&gt;not &lt;span style="color:#7f7f7f;"&gt;(&lt;/span&gt;display-graphic-p&lt;span style="color:#7f7f7f;"&gt;))&lt;/span&gt;
  (setq epg-gpg-program "/usr/bin/gpg1")) ; use GnuPG1 in text terminals&lt;/pre&gt; &lt;/code&gt;
&lt;/blockquote&gt;

Enjoy!</description><category>code</category><category>easypg</category><category>emacs</category><category>gnupg</category><category>hack</category><category>hacking</category><guid>http://milosophical.me/blog/2011/03/17/using-emacs-easypg-in-text-terminals.html</guid><pubDate>Thu, 17 Mar 2011 05:04:59 GMT</pubDate></item><item><title>NetBeans 6.5 and Python</title><link>http://milosophical.me/blog/2008/11/24/netbeans-65-and-python.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;a title="NetBeans 6.5 release page" href="http://www.netbeans.org/community/releases/65/"&gt;NetBeans 6.5 is out&lt;/a&gt;! You can &lt;a title="Using Nimbus with NetBeans 6.5 -- noice!" href="http://mrhaki.blogspot.com/2008/11/start-netbeans-65-with-nimbus-look-and.html"&gt;run it with the&lt;/a&gt; &lt;a title="The Nimbus L&amp;amp;F project page" href="https://nimbus.dev.java.net/"&gt;Nimbus look and feel&lt;/a&gt; too! There's also an &lt;a title="NetBeans 6.5 Python -- Early Access" href="http://www.netbeans.org/features/python/index.html"&gt;Early Access plugin for Python&lt;/a&gt;. All very nice.


I recently had occasion to play with some Python at work (a small script to do some configurations, and I didn't want to do them in bash), so I took the time to get all of this set up. It's all so very easy and not worth writing about. However I thought that the i&lt;a title="NetBeans' integrated Jython debugger" href="http://wiki.netbeans.org/Python#section-Python-Debugger"&gt;nteractive debugger&lt;/a&gt; (which is &lt;em&gt;awesome&lt;/em&gt;, btw) has a small issue that needs resolving. Mean-time, here's a work-around.



&lt;!--more--&gt;&lt;strong&gt;The issue is&lt;/strong&gt;: the debugger (which runs in Jython) starts in the NetBeans 6.5 install directory, but the normal run-time is in the project's source directory. Normally this is not a problem, unless you're writing a script to pick up files from the current directory. If you just dump your data file in the project's source directory, then it'll work when you run it (with the F6 key), but not when you debug it (Ctrl-F5).



&lt;strong&gt;The work-around&lt;/strong&gt;:  The debugger is interactive and includes a Jython shell which is integrated into your debugging context (so cool)! Upon starting the debugger, your can just issue these commands:

&lt;code&gt; &lt;/code&gt;

&lt;pre style="padding-left:30px;"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;strong&gt;import os, sys&lt;/strong&gt;

&amp;gt;&amp;gt;&amp;gt; &lt;strong&gt;os.chdir(os.path.dirname(sys.argv[0]))&lt;/strong&gt;&lt;/pre&gt;

This will set the CWD for the current debug session to the directory where your script file is. That's where the CWD is set when you run scripts normally with the F6 key.



&lt;strong&gt;The solution&lt;/strong&gt;: I've sent an &lt;a title="NetBeans Issue 153733" href="http://www.netbeans.org/issues/show_bug.cgi?id=153733"&gt;enhancement request&lt;/a&gt; to the Python-IDE team in &lt;a title="Python debugger" href="http://www.netbeans.org/issues/buglist.cgi?Submit+query=Submit+query&amp;amp;component=python&amp;amp;subcomponent=debugger&amp;amp;issue_status=NEW&amp;amp;issue_status=STARTED&amp;amp;issue_status=REOPENED&amp;amp;email1=&amp;amp;emailtype1=exact&amp;amp;emailassigned_to1=1&amp;amp;email2=&amp;amp;emailtype2=exact&amp;amp;emailreporter2=1&amp;amp;issueidtype=include&amp;amp;issue_id=&amp;amp;changedin=&amp;amp;votes=&amp;amp;chfieldfrom=&amp;amp;chfieldto=Now&amp;amp;chfieldvalue=&amp;amp;short_desc=&amp;amp;short_desc_type=substring&amp;amp;long_desc=&amp;amp;long_desc_type=substring&amp;amp;issue_file_loc=&amp;amp;issue_file_loc_type=substring&amp;amp;status_whiteboard=&amp;amp;status_whiteboard_type=substring&amp;amp;keywords=&amp;amp;keywords_type=anytokens&amp;amp;field0-0-0=noop&amp;amp;type0-0-0=noop&amp;amp;value0-0-0=&amp;amp;cmdtype=doit&amp;amp;newqueryname=&amp;amp;order=Reuse+same+sort+as+last+time"&gt;NetBeans' issue tracker&lt;/a&gt;. I'm not sure where the CWD should be set in the general case, but probably it should be in &amp;lt;project-base&amp;gt;/src to be consistent with the normal runtime.



&lt;strong&gt;2009-01-11 Update&lt;/strong&gt;: The&lt;a href="http://www.netbeans.org/issues/show_bug.cgi?id=153733"&gt; issue has been fixed&lt;/a&gt;! Awesome work by jymen (Jean-Yves Mengant). I'll have to &lt;a title="Building the NB Python plug-in from source" href="http://wiki.netbeans.org/NbPythonHgBuild"&gt;check out a recent build&lt;/a&gt; from trunk and give it a whirl!</description><category>code</category><category>hacking</category><category>netbeans</category><category>python</category><category>tip</category><guid>http://milosophical.me/blog/2008/11/24/netbeans-65-and-python.html</guid><pubDate>Mon, 24 Nov 2008 01:08:42 GMT</pubDate></item><item><title>Stripping tags from ogg Vorbis files</title><link>http://milosophical.me/blog/2008/08/26/stripping-tags-from-ogg-vorbis-files.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I have a bunch of free &lt;a title="Xiph's meta container format for media" href="http://www.xiph.org/ogg/"&gt;Ogg&lt;/a&gt; &lt;a title="Patent-free audio codec (MP3 killer)" href="http://www.vorbis.com/"&gt;Vorbis&lt;/a&gt; audio files that I've downloaded from &lt;a title="Kahvi Collective. Sound has the power to make the world a better place" href="http://kahvi.org/"&gt;Kahvi.org&lt;/a&gt;. They're great! But recently they've been including cover art within the files, which breaks Windows Media Player (it can't handle the very long tags of binhex-coded JPGs).


Since I rather like WMP's integration in windows (keyboard shortcuts), and &lt;a title="Kewl KDE music player (iTunes killer)" href="http://amarok.kde.org/"&gt;Amarok&lt;/a&gt; &lt;a title="Amarok for win32 is still a work in progress, but it compiles..." href="http://amarok.kde.org/wiki/Development/Win32"&gt;isn't quite ready for win32&lt;/a&gt;, I thought I'd find a way to strip the troublesome tags from the data files rather than change to another player.



Here's a quick-and-dirty shell hack to remove the tags from the files and get them playable by daft players such as Windows Media Player



&lt;!--more--&gt;

&lt;/p&gt;&lt;pre&gt;#!/bin/bash

###############################################################################

#

#   File:       fixvorbis.sh

#   Language:   Bash shell script

#   Time-stamp: &amp;lt;2008-08-26 15:48:45 tzbblg&amp;gt;

#   Platform:   N/A (requirest ogg Vorbis tools installed)

#   OS:         *nix

#   Authors:    Michael Lockhart [MJL]

#

#   Rights:     Copyright © 2008 Michael James Lockhart, B.App.Comp(HONS)

#

#     This program is free software: you can redistribute it and/or

#     modify it under the terms of th e GNU General Public License as

#     published by the Free Software Foundation, either version 3 of the

#     License, or (at your option) any later version.

#

#     This program is distributed in the hope that it will be useful,

#     but WITHOUT ANY WARRANTY; without even the implied warranty of

#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

#     GNU General Public License for more details.

#

#     You should have received a copy of the GNU General Public License

#     along with this program.  If not, see .

#

#   PURPOSE:

#

#     Script to strip out COVERART tags from ogg vorbis files (these

#     tags break certain players...)

#

#   HISTORY:

#

#   MJL20080826 - Created.

#



# extract the comments, less the COVERART tags

# (keep the art in separate files)



for n in *.ogg; do
    echo "Extracting comments and COVERART from $n"
    vorbiscomment -l $n | grep COVERART &amp;gt; $n-art.txt
    vorbiscomment -l $n | grep -v COVERART &amp;gt; $n-comment.txt
done



#if there's a comments patch (stored in patch.txt in the current dir)

# then apply the patch to the comments.

if [ -f patch.txt ]; then
    for n in *-comment.txt; do
	patch $n patch.txt
    done
fi



# edit the comments with new comment files, minus art, possibly patched.

for n in *.ogg; do
    echo "Replacing comments in $n"
    vorbiscomment -c $n-comment.txt -w $n
done



#clean up

rm *-comment.txt



# clean-up of art is manual. There might be different cover-art from

# each file, but if not (diff a*-art.txt b*.txt etc produces no

# output) then just remove all but first and rename it...&lt;/pre&gt;

&lt;hr&gt;The smarts are all in the vorbis utilites included as part of Cygwin. Specifically the script uses vorbiscomment&lt;sub&gt;(1)&lt;/sub&gt; to extract and apply tags in the Ogg files, and grep and (optionally) patch to manipulate the comments.



Enjoy!



P.S. My Wordpress stylesheet is doing weird things with the margins and this is really badly formatted, sorry. You can copy/paste into a text editor just fine though...</description><category>audio</category><category>code</category><category>cygwin</category><category>hacking</category><category>tip</category><category>vorbis</category><guid>http://milosophical.me/blog/2008/08/26/stripping-tags-from-ogg-vorbis-files.html</guid><pubDate>Tue, 26 Aug 2008 06:05:34 GMT</pubDate></item><item><title>Pretty-printing XML with Emacs' NXML-mode</title><link>http://milosophical.me/blog/2008/06/26/pretty-printing-xml-with-emacs-nxml-mode.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;Did you ever get a stream of XML out of a log file, or in a data stream, and it's all mashed together without line-breaks so that it just appears as gobble-de-gook? If there's a data error (not an XML parsing error) then you have to read it so that you can find where the error is, but you don't have XML-spy and NetBeans is overkill or takes forever to fire up...


Emacs to the rescue! &lt;a title="Benjamin Ferrari's blog (seems to lack an " href="http://blog.bookworm.at/"&gt;Benjamin Ferrari&lt;/a&gt; wrote this &lt;em&gt;increadibly useful&lt;/em&gt; (and simple) &lt;a title="Benjamin Ferrari's original blog post for below code" href="http://blog.bookworm.at/2007/03/pretty-print-xml-with-emacs.html"&gt;elisp function&lt;/a&gt; to pretty-print a block of XML code:

&lt;/p&gt;&lt;pre&gt;&lt;!--more--&gt;(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
&lt;a title="NXML-mode home-page" href="http://www.emacswiki.org/cgi-bin/wiki/NxmlMode"&gt;http://www.emacswiki.org/cgi-bin/wiki/NxmlMode&lt;/a&gt; installed to do

this.  The function inserts linebreaks to separate tags that have

nothing but whitespace between them.  It then indents the markup

by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\&amp;gt;[ \\t]*\&amp;lt;" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end))
    (message "Ah, much better!"))&lt;/pre&gt;
Indeed, why isn't this included with NXML-mode?  Ah well, at least my problem's solved for the simple use-case of opening a machine-generated XML file and wanting to visually parse it...



Benjamin's blog has lots of useful Emacs stuff. &lt;a title="Benjamin's intro essay to his emacs hacks, and why anyone might care" href="http://blog.bookworm.at/2007/03/introduction-to-all-these-emacs.html"&gt;Worth a read&lt;/a&gt;.</description><category>XHTML</category><category>code</category><category>emacs</category><category>geek</category><category>hacking</category><category>lisp</category><category>tip</category><guid>http://milosophical.me/blog/2008/06/26/pretty-printing-xml-with-emacs-nxml-mode.html</guid><pubDate>Thu, 26 Jun 2008 02:46:03 GMT</pubDate></item><item><title>Finding DLLs used by a Cygwin program</title><link>http://milosophical.me/blog/2007/03/09/finding-dlls-used-by-a-cygwin-program.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I don't know how many other people get this issue, but it comes up at my work a bit: Some co-worker asks me if I know of a tool to do such-and-such, and invariably I think &lt;em&gt;“well, that's &lt;/em&gt;easy&lt;em&gt; to do on Unix, but on &lt;/em&gt;Windows&lt;em&gt;…”&lt;/em&gt;.


Then I remember Cygwin, and quickly find a Cygwin utility that does it, or can be scripted to do it with a small amount of work. So then co-worker asks if they can have a copy of this utility, and of course Cygwin is Free, so I say “sure, go download from &lt;a title="Cygwin download mirrors" href="http://www.cygwin.com/mirrors.html"&gt;www.cygwin.com&lt;/a&gt;.” Then they say, “yeah, but I don't want to install all of Cygwin, can't you just give me that one program?”



Well, the Cygwin command-line tools &lt;em&gt;can&lt;/em&gt; be run from a Windows &lt;code&gt;CMD.EXE&lt;/code&gt; shell, so this is quite possible to do. However, they all require the Cygwin POSIX layer, which at a minimum means I should also give them &lt;code&gt;cygwin1.dll&lt;/code&gt;. But what &lt;em&gt;other&lt;/em&gt; DLLs might the program use?



&lt;strong&gt;MJL2008-09-10T14:37+1000 Update:&lt;/strong&gt; since this page gets a lot of hits, here's the quick answer: &lt;strong&gt;use cygcheck&lt;/strong&gt;, i.e:

&lt;/p&gt;&lt;p style="text-align:center;"&gt;&lt;code&gt;cygcheck grep&lt;/code&gt;&lt;/p&gt;



Find it under Happy hacker discovery #2. Keep reading if you're bored...



&lt;!--more--&gt;



...



In the past, I used to just give the person the &lt;code&gt;cygwin1.dll&lt;/code&gt; DLL and a program (&lt;code&gt;SPLIT.EXE&lt;/code&gt;,say), let the person run it on their computer, explaining that it will crash with an error about a missing DLL. Then they would come back to me and say that they also need &lt;code&gt;cygintl-8.dll&lt;/code&gt; and try again. It will crash &lt;em&gt;again&lt;/em&gt; because &lt;code&gt;cygintl-8.dll&lt;/code&gt; just happens to link to &lt;code&gt;cygiconv-2.dll&lt;/code&gt;. After supplying this third DLL file, my co-worker can finally run &lt;code&gt;SPLIT.EXE&lt;/code&gt; and break their huge data set into manageable chunks. Everyone's happy.



The whole process is a bit embarrassing for me and annoying for them (though they &lt;em&gt;could&lt;/em&gt; just download the base Cygwin install like I &lt;em&gt;asked&lt;/em&gt;…) So, to solve this problem somewhat, I set about thinking &lt;em&gt;“I wonder if there's a Cygwin tool that can find DLLs in a program?”&lt;/em&gt;.



Well, a quick look at &lt;code&gt;info binutils&lt;/code&gt; reveals that there is nothing that &lt;em&gt;directly&lt;/em&gt; solves my problem of listing which DLLs a program links to. There is this thing called &lt;code&gt;dlltool&lt;/code&gt;, but it is for creating PE dynamic libraries, not for listing the libraries used by a PE executable. Bummer.

&lt;h3&gt;Happy hacker discovery #0&lt;/h3&gt;

Well, there is also a tool called &lt;code&gt;strings&lt;/code&gt;, which will list text strings in binary files. Now, Windows PE executables happen to contain the name of their linked DLLs as text strings, yay! So all I need to do, is pass &lt;code&gt;strings&lt;/code&gt; over a given program, filter for DLL names (to strip out error messages and such) and I have my list.



Oh, but then I'll need to repeat for each DLL as well. So I need a script to do it:

&lt;pre&gt;#!/bin/bash

#

# finds all the DLL files linked by a Win32 PE executable.

# Useful for finding needed DLLs to supply with a Cygwin program when

# sharing just that program with other people.

#



if [ x"$1" = x ]; then
    PROG=`basename $0`
    printf "Usage:  $PROG &amp;lt;command to list DLLs for&amp;gt;\\n"
    printf "        (you should not add '.exe' to the end).\\n"
    exit 1
fi



SEARCH_FILE=`which $1`.exe



# This is not perfect, as it's too permissive, but should be good enough

DLL_REGEXP='^[[:alnum:][:punct:]]*\\.[Dd][Ll][Ll]$'



# We don't care about the Win32 kernel API library...

KERNEL_REGEXP='[Kk][Ee][Rr][Nn][Ee][Ll]32\\.[Dd][Ll][Ll]'



# Get list of program's DLLs:

DLL_LIST=`strings -n 5 $SEARCH_FILE \\
          |grep $DLL_REGEXP \\
          |grep -v $KERNEL_REGEXP`


# Print the DLLs used directly by the program

printf "$SEARCH_FILE:\\n"

for I in $DLL_LIST; do
   printf "\\t$I\\n"
done

printf "\\t(KERNEL32.DLL)\\n\\n"



#Now find each DLL's dependencies (only one level deep though)

for CURR_DLL in $DLL_LIST; do
    SEARCH_DLL=`which $CURR_DLL`
    DLL_DLL_LIST=`strings -n 5 $SEARCH_DLL \\
                  |grep $DLL_REGEXP \\
                  |grep -v $KERNEL_REGEXP \\
                  |grep -v $CURR_DLL`
    printf " --&amp;gt;\\t$CURR_DLL:\\n"
    for I in $DLL_DLL_LIST; do
       printf "\\t\\t$I\\n"
    done
    printf "\\t\\t(KERNEL32.DLL)\\n\\n"
done&lt;/pre&gt;

There we are, a list of DLLs used by a given program, and the DLLs that those DLLs use.



It's not perfect: &lt;strong&gt;it is not recursive&lt;/strong&gt;, so only goes one level deep, but this should cover most cases. One day I might come back to this, when I figure out how to write a recursive function in bash.



So now I know which DLLs to give to my co-worker along with the nifty tool they want. But where on my system are they? Cygwin installs most DLLs into &lt;code&gt;/usr/bin&lt;/code&gt;. But sometimes they can be in &lt;code&gt;/usr/lib&lt;/code&gt;. So do I have to make a search?

&lt;h3&gt;Happy hacker discovery #1&lt;/h3&gt;

Well, no I don't. Cygwin's &lt;code&gt;which&lt;/code&gt; command also works for DLLs, yay! You just have to go:

&lt;pre&gt;  $ &lt;strong&gt;which cygwin1.dll&lt;/strong&gt;
  /usr/bin/cygwin1.dll&lt;strong&gt;
&lt;/strong&gt;  $ &lt;strong&gt;which cygintl-8.dll&lt;/strong&gt;
  /usr/bin/cygintl-8.dll
  $ &lt;strong&gt;which cygiconv-2.dll&lt;/strong&gt;
  /usr/bin/cygiconv-2.dll&lt;/pre&gt;
There, problem solved.

&lt;h3&gt;Happy hacker discovery #2&lt;/h3&gt;

&lt;strong&gt;Update: 2008-01-21 09:56+1100&lt;/strong&gt;: There's an awesome tool that comes with Cygwin, called &lt;code&gt;&lt;strong&gt;cygcheck&lt;/strong&gt;&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;, that does exactly what I need. Thanks for the tip, Leni! Here's a sample output for the SPLIT.EXE example:

&lt;pre&gt;$ &lt;strong&gt;cygcheck split&lt;/strong&gt;

Found: d:\cygwin\bin\split.exe

d:\cygwin\bin\split.exe
  d:\cygwin\bin\cygwin1.dll
    C:\WINDOWS\system32\ADVAPI32.DLL
      C:\WINDOWS\system32\ntdll.dll
      C:\WINDOWS\system32\KERNEL32.dll
      C:\WINDOWS\system32\RPCRT4.dll
        C:\WINDOWS\system32\Secur32.dll
  d:\cygwin\bin\cygintl-8.dll
    d:\cygwin\bin\cygiconv-2.dll&lt;/pre&gt;</description><category>code</category><category>cygwin</category><category>hacking</category><guid>http://milosophical.me/blog/2007/03/09/finding-dlls-used-by-a-cygwin-program.html</guid><pubDate>Thu, 08 Mar 2007 22:14:25 GMT</pubDate></item><item><title>Setting up multiple Java VMs under Cygwin</title><link>http://milosophical.me/blog/2007/03/09/setting-up-multiple-java-vms-under-cygwin.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;It is useful to have different versions of the JVM installed, for a number of reasons:
&lt;/p&gt;&lt;ul&gt;
	&lt;li&gt;Different optimisation features from different JVM implementations&lt;/li&gt;
	&lt;li&gt;Different language features from different JVM versions&lt;/li&gt;
	&lt;li&gt;Java classes compiled with “&lt;em&gt;Tiger&lt;/em&gt;” won't run in “&lt;em&gt;Mantis&lt;/em&gt;”…&lt;/li&gt;
&lt;/ul&gt;

It is also useful to be able to quickly switch between installed JREs/JDKs depending on the task at hand.



If I'm hacking in Linux, the &lt;a title="JPackage home page" href="http://milosophical.me/blog/2007/03/09/www.jpackage.org"&gt;JPackage&lt;/a&gt; project provides a much &lt;a title="JPackage's install/location/naming policy facilitates use of the udate-alternative mechanism" href="http://www.jpackage.org/policy.php"&gt;nicer &lt;/a&gt;&lt;a title="Debian's update-alternatives solution explained" href="http://www.debian.org/doc/debian-policy/ap-pkg-alternatives.html"&gt;solution &lt;/a&gt;to this problem, and the Linux distro' I'm using (SUSE 10.0) &lt;a title="Instruction for installing Java on openSUSE" href="http://en.opensuse.org/Installing_Sun's_Java_on_SUSE_Linux"&gt;uses JPackage&lt;/a&gt;. It'd be nice if there was an &lt;code&gt;update-alternatives&lt;/code&gt; for Cygwin, but since there isn't I've come up with this hack.



&lt;!--more--&gt;



&lt;hr&gt;&lt;strong&gt;2007-03-09T08:06+1100 - Update: Neater &lt;code&gt;JVersion&lt;/code&gt; code&lt;/strong&gt; I've recently upgraded to &lt;em&gt;Mustang&lt;/em&gt; and noticed that this broke my function, since it installs to a different base directory &lt;em&gt;again&lt;/em&gt;… So here is a new version that hopefully covers off future default directory names that Sun comes up with for &lt;em&gt;Dolphin&lt;/em&gt; and the Open Source releases.

&lt;pre&gt;&lt;code&gt;

# Path variables

if [ x"$X_PATH_NO_JAVA" = x ]; then
    export X_PATH_NO_JAVA=~/bin:$PATH     # save path without JAVA, for future switches
fi



if [ x"$JAVA_BASE" = x ]; then
    JAVA_BASE=d:\\java    # default if not set in Windows
fi



# Functions

function JVersion() {
    # Select a Java Development Kit to use.
    # This provides similar functionality in Cygwin, to the
    # updatealternatives command of Debian/SuSE linux.
    #
    # Note, different releases have different standard dirs,
    # so we just look for "k" which seems to be the
    # thing they still have in common.  Also the sed scripts
    # which pull out the version number installed, for
    # reporting, must be specific for each release...

    #Convert JAVA_BASE to Cygwin format
    export JAVA_BASE=`cygpath -up $JAVA_BASE`

    # Use function's argument to select, defaulting to Mantis
    case $1 in
        1.6 | 1.6.0 | 6.0 | 6 | mustang | Mustang | MUSTANG)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.6.0`
            JVERNUM=`echo $JAVA_VER | sed s/^jdk//g`
        ;;
        1.5 | 1.5.0 | 5.0 | 5 | tiger | Tiger | TIGER)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.5.0`
            JVERNUM=`echo $JAVA_VER | sed s/^j2sdk//g`
        ;;
        * | MANTIS)
            export JAVA_VER=`ls $JAVA_BASE | grep k1.4.2`
            JVERNUM=`echo $JAVA_VER | sed s/^j2sdk//g`
        ;;
    esac

    #Set the JAVA_HOME variable (used by some Java programs, so
    #must be in Windows format for those programs to understand)
    export JAVA_HOME=`cygpath -wp $JAVA_BASE/$JAVA_VER`

    #Add the correct JDK runtime to Cygwin's path
    export PATH=$JAVA_BASE/$JAVA_VER/bin:$X_PATH_NO_JAVA

    #Report what happened
    echo Java Version: $JVERNUM
    echo Java Base: $JAVA_BASE
    echo "Java Home: $JAVA_HOME (`cygpath -up $JAVA_HOME`)"
}



#Now run it to set up initial Java environment:

JVersion &amp;gt; /dev/null

&lt;/code&gt;&lt;/pre&gt;

This is all you need now, no complicated set-up variables and such rubbish. You'll notice that the setup steps are now just to set &lt;code&gt;$X_PATH_NO_JAVA&lt;/code&gt; (save the &lt;code&gt;$PATH&lt;/code&gt;&lt;em&gt; without&lt;/em&gt; Java in it), and set up &lt;code&gt;$JAVA_BASE&lt;/code&gt; if necessary. Then after the function is declared and I run it to set a default Java environment for Cygwin (Still &lt;em&gt;Mantis&lt;/em&gt; for now, since my work is using it for a system I support).



Read on for old stuff and false-starts...



...



I have a shell function called &lt;code&gt;JVersion&lt;/code&gt; which you use to select the version of the JVM you want to use, and a bunch of environment variables to make it all work.  Here's how you use it:

&lt;blockquote&gt;

&lt;pre&gt;$ &lt;strong&gt;JVersion tiger&lt;/strong&gt;

Java Version: 1.5.0_04

Java Base: /cygdrive/d/java

Java Home: /cygdrive/d/java/j2sdk1.5.0_04

$ &lt;strong&gt;java -version

&lt;/strong&gt;java version "1.5.0_04"

Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_04-b05)

Java HotSpot(TM) Client VM (build 1.5.0_04-b05, mixed mode, sharing)

$

$ &lt;strong&gt;JVersion mantis

&lt;/strong&gt;Java Version: 1.4.2_05

Java Base: /cygdrive/d/java

Java Home: /cygdrive/d/java/j2sdk1.4.2_05

$ &lt;strong&gt;java -version

&lt;/strong&gt;java version "1.4.2_05"

Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_05-b04)

Java HotSpot(TM) Client VM (build 1.4.2_05-b04, mixed mode)

$&lt;/pre&gt;

&lt;/blockquote&gt;

When using Java from the command-line (DOS or Cygwin), you need to have the interpreter (for JRE) and development tools (for JDK) on the system search PATH. You also used to have to set the CLASSPATH for the JRE to find bootstrap and extension classes, but these are now found automatically via the System property "&lt;code&gt;sun.boot.class.path&lt;/code&gt;" and the Java Extension Mechanism. However, it's still useful to have a JAVA_HOME variable for some third-party tools, such as IDEs.



I've written a bash function which uses some control variables to allow easy switching of JVMs on Cygwin. It's still a bit of a hack, but I find it useful when I'm on Windows to work from the bash prompt as well as whatever IDE I'm hacking in.



The control variables are

&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;JAVA_BASE&lt;/code&gt; = the base directory where all the JVMs are installed. I put each JVM in it's own directory under &lt;code&gt;D:\java&lt;/code&gt;
This variable should be in the Windows environment, but it defaults to &lt;code&gt;d:\java&lt;/code&gt; in my &lt;code&gt;.bashrc&lt;/code&gt; if it was not set (i.e. I forgot to):

&lt;pre&gt;if [ x"$JAVA_BASE" = x ]; then
     JAVA_BASE=d:\\java    # default if not set in Windows
fi&lt;/pre&gt;

I'm sticking to DOS pathnames for this variable, as I intend to replicate this functionality with batch files one day, in case I'm mad enough to run Java from a Windows command shell.  Anyway, I then convert this to a Cygwin path with the following &lt;a title="$man 1 sed" href="http://linux.ctyme.com/man/man2933.htm"&gt;&lt;code&gt;sed&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt; and &lt;a title="$man 1 gawk" href="http://linux.ctyme.com/man/man0898.htm"&gt;&lt;code&gt;awk&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt; hack:

&lt;pre&gt;JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes

export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \\
                                  | sed 's/d://cygdrive/d/g'` # fix drive&lt;/pre&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_MANTIS&lt;/code&gt; = the version (without the release part) corresponding to “&lt;em&gt;Mantis&lt;/em&gt;”&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_TIGER&lt;/code&gt; = the version (without release) corresponding to “&lt;em&gt;Tiger&lt;/em&gt;”&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_VER&lt;/code&gt; = the specific version and release of the currently selected JVM (e.g. 1.5.0_04)
&lt;pre&gt;if [ x"$JAVA_MANTIS" = x ]; then
  export JAVA_MANTIS=`ls $JAVA_BASE | grep 1.4.2 \\
                                    | sed s/^j2sdk//g`
fi

if [ x"$JAVA_TIGER" = x ]; then
  export JAVA_TIGER=`ls $JAVA_BASE | grep 1.5.0 \\
                                   | sed s/^j2sdk//g`
fi

if [ x"$JAVA_VER" = x ]; then
  export JAVA_VER=$JAVA_MANTIS     # default if not set
fi&lt;/pre&gt;

&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt; = the install directory of the currently selected JVM (e.g. &lt;code&gt;d:\java\j2sdk1.4.2_05&lt;/code&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;X_PATH_NO_JAVA&lt;code&gt; = the system search path, without a JVM&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;&lt;code&gt;PATH = the system search path&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

The aim is to set JAVA_HOME and PATH so that the Java tools can be found. They are set using the previous variables:

&lt;pre&gt;export JAVA_HOME=$JAVA_BASE/j2sdk$JAVA_VER

if [ x"$X_PATH_NO_JAVA" = x ]; then
  export X_PATH_NO_JAVA=~/bin:$PATH  # save path without JAVA
fi

export PATH=$JAVA_HOME/bin:$X_PATH_NO_JAVA&lt;/pre&gt;

So, the above code is run inside my &lt;code&gt;.bashrc&lt;/code&gt;, which takes care of finding the installed JVMs and setting Mantis as the default to use. But what about switching? Well, here's the shell function:

&lt;blockquote&gt;

&lt;pre&gt;function JVersion() {
    case $1 in
        1.5 | 1.5.0 | 5.0 | 5 | tiger | Tiger | TIGER)
            export JAVA_VER=$JAVA_TIGER
        ;;
        *)
        export JAVA_VER=$JAVA_MANTIS
        ;;
    esac

    JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes
    export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \
                                      | sed 's/d://cygdrive/d/g'` # fix drive
    export JAVA_HOME=$JAVA_BASE/j2sdk$JAVA_VER
    export PATH=$JAVA_HOME/bin:$X_PATH_NO_JAVA

    echo Java Version: $JAVA_VER
    echo Java Base: $JAVA_BASE
    echo Java Home: $JAVA_HOME
}&lt;/pre&gt;

&lt;/blockquote&gt;

You may have noticed that this hack is rather brittle. It works well, but only so long as you follow these steps:

&lt;ol&gt;
	&lt;li&gt;Install your Javas on your &lt;code&gt;D:&lt;/code&gt; drive (or you have to fix all of the &lt;code&gt;sed&lt;/code&gt; scripts!)&lt;/li&gt;
	&lt;li&gt;Have a “base” directory, such as &lt;code&gt;D:\java&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Have a Windows environment variable called &lt;code&gt;JAVA_BASE&lt;/code&gt; equal to the “base” directory&lt;/li&gt;
	&lt;li&gt;Install your Javas each in a sub-directory of your “base”, called &lt;code&gt;j2sdk&lt;em&gt;w&lt;/em&gt;.&lt;em&gt;x&lt;/em&gt;.&lt;em&gt;y&lt;/em&gt;_&lt;em&gt;z&lt;/em&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

Additionally it only caters for a &lt;em&gt;single&lt;/em&gt; release of each Java version, &lt;em&gt;and&lt;/em&gt; only for &lt;a title="Sun's internal J2SE release code names" href="http://java.sun.com/j2se/codenames.html"&gt;Java versions&lt;/a&gt; “&lt;em&gt;Mantis&lt;/em&gt;” (1.4.2) and “&lt;em&gt;Tiger&lt;/em&gt;” (1.5.0). If you want to install “&lt;em&gt;Mustang&lt;/em&gt;” and switch to it, you'll need to add a &lt;code&gt;JAVA_MUSTANG&lt;/code&gt; variable, equal to 1.6.0 and also add a case for 1.6.0 to both the &lt;code&gt;JAVA_VER&lt;/code&gt; setup code and the &lt;code&gt;JVersion&lt;/code&gt; &lt;code&gt;case&lt;/code&gt; statement… ugly, but I haven't come up with a more elegant solution yet.  Ultimately I'd like to make a proper replacement for &lt;code&gt;update-alternatives&lt;/code&gt;, but since symlinks will only work for the Cygwin tools, and not the Java tools themselves, it seems unlikely I'll come up with a nicer solution.

&lt;h3&gt;A note about paths in Java on Cygwin:&lt;/h3&gt;

This is noted in the Cygwin docs somewhere I think, but just a reminder: &lt;code&gt;java.exe&lt;/code&gt;, &lt;code&gt;javac.exe&lt;/code&gt;, etc. are Win32 programs, and are not linked to the Cygwin DLLs in any way. So &lt;em&gt;always&lt;/em&gt; they will need DOS style paths (&lt;code&gt;D:\&lt;em&gt;somedir&lt;/em&gt;\&lt;em&gt;etc&lt;/em&gt;&lt;/code&gt;). They won't understand Cygwin's &lt;code&gt;/cygdrive/d/&lt;em&gt;whatever&lt;/em&gt;&lt;/code&gt;. Also as I just alluded to, any Cygwin links will not be followed by the Java tools, for the same reason.  In &lt;a title="$man 1 bash" href="http://linux.ctyme.com/man/man0210.htm"&gt;&lt;code&gt;bash&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt;&lt;/a&gt;, you'll need to escape the sloshes if you're setting the classpath on the command line:

&lt;pre&gt;java -classpath D:\\\\java\\\\special-classes\\\\somefile.jar MyClass&lt;/pre&gt;

Since java transposes the &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; characters itself, it &lt;em&gt;may&lt;/em&gt; be possible to do the following:

&lt;pre&gt;java -classpath D:/java/special-classes/somefile.jar MyClass&lt;/pre&gt;

But I haven't tested it…



&lt;hr&gt;&lt;strong&gt;2006-06-17T16:39+1000 - Update: Cygwin's &lt;code&gt;cygpath&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command&lt;/strong&gt; I should have seen this before spending so long playing with sed and sloshes…Cygwin's &lt;code&gt;cygpath&lt;/code&gt;&lt;sub&gt;(1)&lt;/sub&gt; command can be used to fix the Unix/DOS path stuff, much simpler than mucking about with &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt;.  So in the above, instead of code like this:

&lt;pre&gt;JAVA_BASE=`echo $JAVA_BASE | sed 's////g'`   # fix DOS sloshes

export JAVA_BASE=`echo $JAVA_BASE | awk '{print(tolower($1))}' \\
                                  | sed 's/d://cygdrive/d/g'` # fix drive&lt;/pre&gt;
… that mess can be replaced replaced with this:

&lt;pre&gt;&lt;code&gt;export JAVA_BASE=`cygpath -up $JAVA_BASE`&lt;/code&gt;&lt;/pre&gt;

… (using back-quotes, or the &lt;code&gt;$()&lt;/code&gt; notation if you prefer).  Similarly, to run Java with a classpath specified in a Cygwin format (i.e. from a Cygwin script or prompt):

&lt;pre&gt;&lt;code&gt;java -classpath `cygpath -wp /cygdrive/d/java/special-classes/somefile.jar` MyClass&lt;/code&gt;&lt;/pre&gt;</description><category>alternatives</category><category>code</category><category>cygwin</category><category>hacking</category><category>java</category><category>shell</category><category>sloshes</category><guid>http://milosophical.me/blog/2007/03/09/setting-up-multiple-java-vms-under-cygwin.html</guid><pubDate>Thu, 08 Mar 2007 21:21:02 GMT</pubDate></item><item><title>Monospace fonts</title><link>http://milosophical.me/blog/2006/06/23/monospace-fonts.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I finally got fed up enough with Courier New to start searching for a legible, monospace font to use in jEdit. In Emacs, I'm particularly fond of the standard X font "misc-fixed" (though it's a little tough to tell appart O and 0 still). But for jEdit, the Java monospace font seems to map to Courier New in Windows, and to some God-awful font on Linux.


&lt;!--more--&gt;Playing with my neighbours Macintosh, I quite like the fonts you can see in the Terminal program and in Xcode:

&lt;/p&gt;&lt;p align="center"&gt;&lt;a title="photo sharing" href="http://www.flickr.com/photos/lockhart/172996926/"&gt;&lt;img src="http://static.flickr.com/47/172996926_63583fe908_m.jpg" alt="Mac hacking screenshot (not mine)"&gt;&lt;/a&gt;

&lt;a href="http://www.flickr.com/photos/lockhart/172996926/"&gt;Mac hacking screenshot (not mine)&lt;/a&gt;



I wish Windows and Linux had nice fonts too. Well, my wish is granted.  Thanks to &lt;a title="Monospace font review" href="http://www.lowing.org/fonts/"&gt;this great site&lt;/a&gt;, which reviews monospace fonts from a programmer's point of view, I've found three fonts I just love, and (no surprise), two of them come from Apple and are freely available.



I agree with the review.  The best all-round monospace font is definitely &lt;a title="Bitstream Inc. is a software development company that enables customers ... to render high-quality text, ... select from the largest collection of fonts online... Its core competencies include browsing, font, and publishing technologies." href="http://www.bitstream.com/"&gt;Bitstream&lt;/a&gt;'s &lt;a title="Download Vera Sans Mono from the GNOME project" href="http://www.gnome.org/fonts/"&gt;Vera Sans Mono&lt;/a&gt;.  It's clear, and uncluttered with good distinction between the similar characters 1 i l | and o O 0.  Importantly, the font width doesn't change with different weights, so if your syntax highlighter makes some keywords &lt;strong&gt;bold&lt;/strong&gt; or &lt;em&gt;slanted&lt;/em&gt;,  they are still the same width as the normal words, meaning that the alignment doesn't break in jEdit.



I really love &lt;a title="Anonymous font's web page" href="http://www.ms-studio.com/FontSales/anonymous.html#"&gt;Anonymous&lt;/a&gt; though. As it's home page describes it, this is based on Apple's Anonymous 9 font, which itself was a re-working of Monaco, the system font for the Macintosh.  Anonymous is highly legible, even more than Vera Sans.  I really love the zeros, they look like a backwards Ø character.  Also though it's a san-serif font, the i and l characters have serifs cleverly placed to distinguish from the 1 and | characters .  The only problem I've found with it, is that the bold characters are ever so slightly wider than the normal characters, so in syntax highlighting, the alignment gets slightly skewed.



The &lt;a title="Monaco.TTF" href="http://www.gringod.com/wp-upload/MONACO.TTF"&gt;Monaco&lt;/a&gt; font, which is the basis for Anonymous, is also pretty nice but has the same issue with the font weights. It's interesting to compare the two and see what was changed.  The zero is a more traditional slashed 0 (sort of like Ø) and some of the round shapes are different.



Here's a shot of my jEdit using Vera Sans Mono:

&lt;/p&gt;&lt;p align="center"&gt;&lt;a title="photo sharing" href="http://www.flickr.com/photos/lockhart/173061294/"&gt;&lt;img src="http://static.flickr.com/65/173061294_8ec868bbaa.jpg?v=0" alt="jEdit Vera Sans Mono"&gt;&lt;/a&gt;

&lt;a href="http://www.flickr.com/photos/lockhart/173061294/"&gt;jEdit Vera Sans Mono&lt;/a&gt;

&lt;/p&gt;&lt;p align="left"&gt;Since that's rather small, here's a close-up:&lt;/p&gt;



&lt;p align="center"&gt;&lt;a title="photo sharing" href="http://www.flickr.com/photos/lockhart/173067100/"&gt;&lt;img src="http://static.flickr.com/77/173067100_b8c0524490_m.jpg" alt="jEdit Vera Sans Mono - Detail"&gt;&lt;/a&gt;

&lt;a href="http://www.flickr.com/photos/lockhart/173061294/"&gt;jEdit Vera Sans Mono - Detail&lt;/a&gt;

&lt;/p&gt;&lt;p align="left"&gt;&lt;/p&gt;</description><category>code</category><category>fonts</category><category>hacking</category><category>jEdit</category><category>screenshot</category><guid>http://milosophical.me/blog/2006/06/23/monospace-fonts.html</guid><pubDate>Fri, 23 Jun 2006 03:01:13 GMT</pubDate></item><item><title>jEdit macros, vs. Emacs functions</title><link>http://milosophical.me/blog/2006/06/07/jedit-macros-vs-emacs-functions.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;I've been playing with customising &lt;a title="The jEdit programmer's editor home page" href="http://www.jedit.org"&gt;jEdit&lt;/a&gt; a little bit, and decided to have a go at writing some simple date insertion macros.  These perform the same work as some old &lt;a title="A fairly good elisp tutorial." href="http://www.glug.org/people/ttn/software/elisp-tutorial/"&gt;elisp&lt;/a&gt; functions I wrote years ago in &lt;a title="GNU Emacs, the One True Way..." href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt;, to insert date/time stamps in various formats.  In my &lt;code&gt;.emacs&lt;/code&gt; file, I bind these functions to short-cut keys, and then use them for updating Changelogs in code and in offline journal entries.


&lt;!--more--&gt;Here are my original elisp functions, which are self describing:



&lt;!-- .syntax0 { color: #ffcc99; } .syntax1 { color: #15ee15; font-style: italic; } .syntax2 { color: #0be276; } .syntax3 { color: #99f433; } .syntax4 { color: #fc5b32; } .syntax5 { color: #ff0000; } .syntax6 { color: #ff9966; font-weight: bold; } .syntax7 { background: #ffffcc; color: #ff0066; } .syntax8 { color: #6087fa; font-weight: bold; } .syntax9 { color: #0099ff; font-weight: bold; } .syntax10 { color: #6699ff; font-weight: bold; } .syntax11 { color: #9999ff; font-weight: bold; } .syntax12 { background: #003333; color: #ff6600; font-weight: bold; } .syntax13 { color: #ff6666; } .syntax14 { color: #ff3333; } .syntax15 { color: #9933ff; } .syntax16 { color: #9900ff; } .syntax17 { color: #9966ff; font-weight: bold; } .syntax18 { color: #ffffff; font-weight: bold; }  --&gt;

&lt;/p&gt;&lt;blockquote&gt;

&lt;pre&gt;&lt;code&gt;(defun insert-date-iso ()
  "Inserts the current local date and time (to the minute) into the current buffer
before Point. The data are formatted per ISO 8601 specification. This is useful for

prefixing entries in a log book."
  (interactive)
  (setq now (decode-time)
        final-string (format "%04d-%02d-%02dT%02d:%02d+%d"
                             (nth 5 now)          ; yyyy
                             (nth 4 now)          ; mm
                             (nth 3 now)          ; dd
                             (nth 2 now)          ; HH
                             (nth 1 now)          ; MM
                             (/ (nth 8 now) 36))) ; UTCO
  (insert final-string))


(defun insert-date-stamp ()
  "Inserts the current local date into the current buffer before Point. The data are
formatted per ISO 8601 short specification and prefixed with my initials 'MJL'. This

is useful for inserting mod comments into code files."
  (interactive)
  (setq now (decode-time)
        final-string (format "MJL%04d%02d%02d - "
                             (nth 5 now)          ; yyyy
                             (nth 4 now)          ; mm
                             (nth 3 now)))        ; dd
  (insert final-string))


(defun insert-date-dow ()
  "Inserts the current local date and the day of the week into the current buffer
before Point. The date data are formatted per ISO 8601 specification. The DOW is

expanded to the full name. This is useful for prefixing day entries in a log book."
  (interactive)
  (setq DOWlist '(Sunday Monday Tuesday Wednesday Thursday Friday Saturday))
  (setq now (decode-time)
        final-string (format "%04d-%02d-%02d %s"
                             (nth 5 now)                 ; yyyy
                             (nth 4 now)                 ; mm
                             (nth 3 now)                 ; dd
                             (nth (nth 6 now) DOWlist))) ; day
  (insert final-string))&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

These are fairly simple, the only obfuscated part is the way that the output list &lt;code&gt;now&lt;/code&gt; has been created from the &lt;code&gt;(decode-time)&lt;/code&gt; built-in, which then has to be picked appart to get the different date elements for formatting.



Compare this with the jEdit equivalents, which are written in &lt;a title="The BeanShell java scripting language" href="http://www.beanshell.org/"&gt;BeanShell&lt;/a&gt;. Each macro is in it's own &lt;code&gt;.bsh&lt;/code&gt; file, rather than all together in a single file like the elisp functions, and the documentation is done in XML, rather than as a doc-comment in elisp:

&lt;blockquote&gt;

&lt;pre&gt;&lt;code&gt;

/*
 * Insert_Time_ISO.bsh - a BeanShell macro script for the
 * jEdit text editor - inserts current system date in ISO 8601 format
 * Copyright © 2006 Michael Lockhart
 *
 * MJL20060603 - Created
 * MJL20060604 - Tidy code, fix meta-comments
 * MJL20060605 - Check object creation, just in case...
 * MJL20060606 - use Macros.error(), instead of Macros.message()
 *
 */


import java.text.SimpleDateFormat;



dateFmt = new SimpleDateFormat("yyyy-MM-dd");

timeFmt = new SimpleDateFormat("HH:mmZZZZ");



now = new Date();



if ((now != null) &amp;amp;&amp;amp; (dateFmt != null) &amp;amp;&amp;amp; (timeFmt != null))
    textArea.setSelectedText(dateFmt.format(now) + "T" +
                             timeFmt.format(now) + " ");
else
    Macros.error(view,"Could not create system Date or SimpleDateFormat "
                       + "objects!nJVM resources might be extremely low.");


/*
	Macro index data (in DocBook format)


&amp;lt;listitem&amp;gt;
    &amp;lt;para&amp;gt;&amp;lt;filename&amp;gt;Insert_Time_ISO.bsh&amp;lt;/filename&amp;gt;&amp;lt;/para&amp;gt;
    &amp;lt;abstract&amp;gt;&amp;lt;para&amp;gt;
        Inserts the current local date and time (to the minute) into the
        current buffer before the cursor. The data are formatted per ISO
        8601 specification. This is useful for prefixing entries in a log
        book.
    &amp;lt;/para&amp;gt;&amp;lt;/abstract&amp;gt;
&amp;lt;/listitem&amp;gt;



*/



// end Insert_Time_ISO.bsh

&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;

&lt;pre&gt;&lt;code&gt;

/*
 * Insert_Date_ISO-MJL.bsh - a BeanShell macro script for the
 * jEdit text editor - inserts current system date in ISO 8601 condensed format
 * Copyright © 2006 Michael Lockhart
 *
 * MJL20060603 - Created
 * MJL20060604 - Tidy code, fix meta-comments
 * MJL20060605 - Check object creation, just in case...
 * MJL20060606 - use Macros.error(), instead of Macros.message()
 */


import java.text.SimpleDateFormat;



dateFmt = new SimpleDateFormat("yyyyMMdd");

now = new Date();



if ((now != null) &amp;amp;&amp;amp; (dateFmt != null))
    textArea.setSelectedText("MJL" + dateFmt.format(now) + " - ");
else
    Macros.error(view,"Could not create system Date or SimpleDateFormat "
                    + "objects!nJVM resources might be extremely low.");


/*
	Macro index data (in DocBook format)


&amp;lt;listitem&amp;gt;
    &amp;lt;para&amp;gt;&amp;lt;filename&amp;gt;Insert_Date_ISO-MJL.bsh&amp;lt;/filename&amp;gt;&amp;lt;/para&amp;gt;
    &amp;lt;abstract&amp;gt;&amp;lt;para&amp;gt;
        Inserts the current local date into the current buffer before the
        cursor. The data are formatted per ISO 8601 short specification and
        prefixed with my initials 'MJL'. This is useful for inserting mod
        comments into code files.
    &amp;lt;/para&amp;gt;&amp;lt;/abstract&amp;gt;
&amp;lt;/listitem&amp;gt;



*/



// end Insert_Date_ISO-MJL.bsh

&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;

&lt;pre&gt;&lt;code&gt;

/*
 * Insert_Date_DOW.bsh - a BeanShell macro script for the
 * jEdit text editor - inserts current system in ISO 8601 format, with day-of-week
 * Copyright © 2006 Michael Lockhart
 *
 * MJL20060604 - Created
 * MJL20060605 - Check object creation, just in case...
 * MJL20060606 - use Macros.error(), instead of Macros.message()
 *
 */


import java.text.SimpleDateFormat;



dateFmt = new SimpleDateFormat("yyyy-MM-dd EEEE");



now = new Date();



if ((now != null) &amp;amp;&amp;amp; (dateFmt != null))
    textArea.setSelectedText(dateFmt.format(now) + " ");
else
    Macros.error(view,"Could not create system Date or SimpleDateFormat "
                    + "objects!nJVM resources might be extremely low.");


/*
	Macro index data (in DocBook format)


&amp;lt;listitem&amp;gt;
    &amp;lt;para&amp;gt;&amp;lt;filename&amp;gt;Insert_Date_DOW.bsh&amp;lt;/filename&amp;gt;&amp;lt;/para&amp;gt;
    &amp;lt;abstract&amp;gt;&amp;lt;para&amp;gt;
        Inserts the current local date and the day of the week into the
        current buffer before the cursor. The date data are formatted per
        ISO 8601 specification. The DOW is expanded to the full name. This
        is useful for prefixing day entries in a log book.
    &amp;lt;/para&amp;gt;&amp;lt;/abstract&amp;gt;
&amp;lt;/listitem&amp;gt;



*/



// end Insert_Date_DOW.bsh

&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

The comments are  lot more verbose, but you can see the Insert_Date_ISO-MJL macro at work in the script comments above. Also, the Java &lt;a title="Javadoc - J2SE5 documentation" href="http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html"&gt;&lt;code&gt;SimpleDateFormat&lt;/code&gt;&lt;/a&gt; class makes formatting much simpler to read, I feel, but even with BeanShell's ability to use untyped variables (for example, in BeanShell you can say “&lt;code&gt;dateFormatter = new SimpleDateFormat&lt;/code&gt;…”, instead of Java's “&lt;code&gt;DateFormat dateFormatter=new SimpleDateFormat&lt;/code&gt;…”), the code is still not as &lt;a title="//Elegant" href="http://www.catb.org/~esr/jargon/html/E/elegant.html"&gt;&lt;em&gt;elegant&lt;/em&gt;&lt;/a&gt; as the elisp version.



However, I think I'm starting to like jEdit over Emacs (blasphemy!).  Mind you it's slow: it makes Emacs seem zippy, and traditionaly Emacs stood for “EMACS Makes A Computer Slow”!



On a side-note, there is a nice &lt;a title="jEdit plugins page" href="http://plugins.jedit.org/"&gt;plugin&lt;/a&gt; for jEdit, called &lt;a title="The Code2HTML page" href="http://plugins.jedit.org/plugins/?Code2HTML"&gt;Code2HTML&lt;/a&gt;, which renders your code in HTML, with syntax highlighting to match that done by jEdit (and jEdit knows a &lt;em&gt;lot&lt;/em&gt; of languages!).  Unfortunately when I pasted the generated HTML into this WordPress post and then saved it, all the highlighting got removed… I wonder if it has something to do with the plugin's use of &lt;code&gt;&amp;lt;SPAN&amp;gt;&lt;/code&gt;s and CSS Styles? But even if I paste the &lt;code&gt;&amp;lt;STYLE&amp;gt;&lt;/code&gt; block into this post as well, the formatting gets eaten up by WordPress :(  Something to look into.



&lt;hr&gt;&lt;strong&gt;2006-06-07T15:36+1000 - Update: &lt;/strong&gt;I should make a point about the copyright on these scripts:  they're copy&lt;em&gt;left&lt;/em&gt;, GNU GPL2.0.  I just snipped out the boilerplate to make this post shorter.  Feel free to copy/use as you like, subject to the GPL, and you should of course cite the author (me) and include the boilerplate disclamers on any copy you distribute to others.  The missing boilerplate is below:

&lt;blockquote&gt;

&lt;pre&gt;&lt;code&gt; *
 *
 * Copyright © 2006 Michael Lockhart.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the jEdit application; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;hr&gt;&lt;strong&gt;2008-07-15T10:45+1000 - Update: &lt;/strong&gt; I've finally re-written these functions using &lt;a title="format-time-string (Emacs manual)" href="http://www.gnu.org/software/emacs/elisp/html_node/Time-Parsing.html#Time-Parsing"&gt;format-time-string&lt;/a&gt; as advised twice in the comments (!). Duh!

&lt;blockquote&gt;

&lt;pre&gt;&lt;code&gt;

(defun mjl-insert-date-iso ()
  "Inserts the current local date and time (to the minute) into
the current buffer before Point. The date is formatted per ISO

8601 specification. This is useful for prefixing entries in a log

book."
  (interactive)
  (insert (format-time-string "%Y-%m-%dT%R%z")))


(defun mjl-insert-date-stamp ()
  "Inserts the current local date into the current buffer before
Point. The date is formatted per ISO 8601 short specification and

prefixed with my initials 'MJL'. This is useful for inserting mod

comments into code files."
  (interactive)
  (setq now (decode-time))
  (insert (format-time-string "MJL%Y%m%d")))


(defun mjl-insert-date-dow ()
  "Inserts the current local date and the day of the week into
the current buffer before Point. The date is formatted per ISO

8601 specification. The DOW is expanded to the full name. This is

useful for prefixing day entries in a log book."
  (interactive)
  (insert (format-time-string "%Y-%m-%d %A")))
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

… and a new one, since I've become an &lt;a title="Emacs Org mode (standard in Emacs 22)" href="http://orgmode.org/"&gt;Org&lt;/a&gt; (and &lt;a title="Emacs Remember mode (from Emacs Wiki)" href="http://www.emacswiki.org/cgi-bin/wiki/RememberMode"&gt;Remember&lt;/a&gt;) fan:

&lt;blockquote&gt;&lt;code&gt; &lt;/code&gt;

&lt;pre&gt;(defun mjl-insert-log-entry-org ()
  "Inserts the current local date and time into
the current buffer before Point. The date is formatted to suit

Org mode's agenda and highlighting functions. The date is also

formatted as a level 3 headline for inclusion in an org

file."
  (interactive)
  (insert (format-time-string "*** &amp;lt;%Y-%m-%d %A %R&amp;gt; ")))&lt;/pre&gt;
&lt;/blockquote&gt;

I should add that my flirtation with jEdit is over, by the way. Back to emacs for me, and I'm repenting for my blasphemous ways...</description><category>code</category><category>copyright</category><category>emacs</category><category>hacking</category><category>jEdit</category><category>java</category><category>lisp</category><guid>http://milosophical.me/blog/2006/06/07/jedit-macros-vs-emacs-functions.html</guid><pubDate>Wed, 07 Jun 2006 00:03:13 GMT</pubDate></item><item><title>Cygwin systray menu</title><link>http://milosophical.me/blog/2006/04/18/cygwin-systray-menu.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;
&lt;em&gt;This post was originally published
  at &lt;a href="http://sinewalker.wordpress.com/2006/04/18/cygwin-systray-menu/"&gt;sinewalker.wordpress.com&lt;/a&gt;
  on 18 April 2006.&lt;/em&gt;
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;While I'm on the subject of Cygwin hacking, I discovered this man-page about the Cygwin X server: type &lt;code&gt;man XWinrc&lt;/code&gt; and read about how you can hack your systray icon to include a little launcher menu for you favorite X clients 8)
&lt;/p&gt;
&lt;br&gt;
&lt;!--more--&gt;
&lt;p&gt;
Here's my &lt;code&gt;.XWinrc&lt;/code&gt; for cygwin, which I prepared earlier:

&lt;/p&gt;&lt;pre&gt;&lt;code&gt;MENU systray {
  xterm  EXEC "xterm -display %display%"
  mc EXEC "xterm -geometry 132x50 -display %display% mc"
  emacs EXEC "emacs -display %display%"
  xcalc EXEC "xcalc -display %display%"
  SEPARATOR
}

ROOTMENU systray

&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;
The example from the man-page has options to xterm to turn on scroll bars and such, but for me, that is already taken care of by my &lt;code&gt;.Xdefaults&lt;/code&gt; file:
&lt;/p&gt;
&lt;br&gt;

&lt;pre&gt;&lt;code&gt;
XTerm.*.background : black
XTerm.*.foreground : white
XTerm.*.cursorColor : yellow
XTerm.*.cursorBlink : true
XTerm.*.scrollBar : true
XTerm.*.Font : -*-fixed-medium-*-*-*-15-*-*-*-*-*-iso8859-1
XTerm.*.curses : on
XTerm.*.multiScroll : on
XTerm.*.jumpScroll : on

XCalc.*.background : DarkSlateGrey
XCalc.*.foreground : Wheat

gnuplot*background: black
gnuplot*textColor: yellow
gnuplot*borderColor: grey
gnuplot*axisColor: white
gnuplot*line1Width: 2
gnuplot*line2Width: 2
gnuplot*line3Width: 2
gnuplot*line4Width: 2
gnuplot*line5Width: 2
gnuplot*line6Width: 2
gnuplot*line7Width: 2
gnuplot*line8Width: 2
&lt;/code&gt;&lt;/pre&gt;</description><category>code</category><category>cygwin</category><category>hacking</category><guid>http://milosophical.me/blog/2006/04/18/cygwin-systray-menu.html</guid><pubDate>Tue, 18 Apr 2006 06:11:43 GMT</pubDate></item><item><title>Hacking emacsclient in cygwin</title><link>http://milosophical.me/blog/2006/04/18/hacking-emacsclient-in-cygwin.html</link><dc:creator>Mike Lockhart</dc:creator><description>&lt;p&gt;
&lt;em&gt;This post was originally published
  at &lt;a href="http://sinewalker.wordpress.com/2006/04/18/hacking-emacsclient-in-cygwin/"&gt;sinewalker.wordpress.com&lt;/a&gt;
  on 18 April 2006.&lt;/em&gt;
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I don't know why I haven't ever got around to this, but here—finally—is a hack to have Cygwin only ever start one instance of emacs (especially important in cygwin, because Win32 does not appear to share program texts between processes… )
&lt;/p&gt;

&lt;br&gt;

&lt;!--more--&gt;
&lt;p&gt;First, have Emacs start it's server whenever Emacs is started.  Put this in your &lt;code&gt;.emacs&lt;/code&gt; file:

&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(server-start)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Next, add the following function to your &lt;code&gt;.bashrc&lt;/code&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function emacs(){
  emacsclient $* || /usr/bin/emacs $*
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now, whenever you type &lt;code&gt;emacs somefile&lt;/code&gt;, instead of loading a fresh emacs process (expensive operation in Windows/cygwin), &lt;code&gt;emacsclient&lt;/code&gt; will be run, and attempt to connect to a running emacs server to edit &lt;code&gt;somefile&lt;/code&gt;. If there is no server (e.g. emacs has not been started), then &lt;code&gt;emacsclient&lt;/code&gt; will fail. In this case, &lt;code&gt;emacs&lt;/code&gt; will be started instead to edit the file, and the &lt;code&gt;.emacs&lt;/code&gt; file makes sure that the server is ready for &lt;code&gt;emacsclient&lt;/code&gt; next time.&lt;/p&gt;</description><category>code</category><category>cygwin</category><category>emacs</category><category>hacking</category><guid>http://milosophical.me/blog/2006/04/18/hacking-emacsclient-in-cygwin.html</guid><pubDate>Tue, 18 Apr 2006 05:57:29 GMT</pubDate></item></channel></rss>