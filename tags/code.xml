<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Milosophical Me (Posts about code)</title><link>http://milosophical.me/</link><description></description><atom:link href="http://milosophical.me/tags/code.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:sinewalker@gmail.com"&gt;Michael Lockhart&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0"
     src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png"/&gt;&lt;/a&gt;
</copyright><lastBuildDate>Fri, 20 Jul 2018 00:12:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Journald experiments - Testing systemd's logger: speed and buffering</title><link>http://milosophical.me/blog/2018/journald-experiments-0.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been having good natured arguments at work about whether it's the &lt;em&gt;End of the World&lt;/em&gt; that we are at last switching away from &lt;em&gt;Scientific Linux 6&lt;/em&gt; and it's &lt;a href="https://en.wikipedia.org/wiki/UNIX_System_V"&gt;System V&lt;/a&gt; style &lt;a href="https://en.wikipedia.org/wiki/Init"&gt;init&lt;/a&gt; scripts, to &lt;em&gt;CentOS 7&lt;/em&gt;, which uses &lt;a href="https://freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;My own opinion is that &lt;em&gt;systemd is pretty &lt;a href="http://milosophical.me/jargon/html/C/cuspy.html"&gt;cuspy&lt;/a&gt;&lt;/em&gt;.  It's not perfect, but nor is it some great hulking monolithic monster come to destroy the Unix Way in the Linux world.  It offers many worthwhile improvements and I've enjoyed using it in openSUSE for years now. I look forward to switching away from the hair-ball of &lt;em&gt;wet&lt;/em&gt; SysV init scripts with clumsy precedent semantics and manual service recovery.&lt;/p&gt;
&lt;p&gt;Now, I don't want to throw my hat into the ring on the pro's and con's of systemd having replaced the start-up infrastructure (and &lt;em&gt;a lot&lt;/em&gt; of other systems besides) on Linux-based operating systems.  Enough has been said already on that front, by many more experienced than I, and further argument is pointless:  whichever camp you're in, you won't be convinced of the other sides point of view by now.&lt;/p&gt;
&lt;p&gt;However there is &lt;em&gt;one&lt;/em&gt; argument against systemd that I'm not so sure about: &lt;a href="http://0pointer.de/blog/projects/journal-submit.html"&gt;journald&lt;/a&gt; and it's past issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;alleged buffering of logs&lt;/strong&gt;, making diagnostics and debugging on time-critical services difficult or impossible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;binary log files&lt;/strong&gt; which can be corrupted, and then not useful thereafter (because they're binary)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;volatile storage&lt;/strong&gt;, so that your logs are gone when you want them the most: after an unplanned reboot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll be spending a few days experimenting with &lt;code&gt;journald&lt;/code&gt; in these areas, to see if it's as bad now as it was five years ago when &lt;a href="https://bbs.archlinux.org/viewtopic.php?id=159090"&gt;concerns like these were being raised&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I want to look at the &lt;code&gt;journald&lt;/code&gt; daemon / &lt;code&gt;journalctl&lt;/code&gt; log viewer a bit, from the point of view of &lt;strong&gt;buffering output&lt;/strong&gt;, whether and where it could be occurring, and what the implications might be as a web sysop.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is a medium-long post, with about 23 minutes of terminal output recordings (in text, using &lt;a href="https://ascinnema.org"&gt;asciinema&lt;/a&gt;) and is about 2⅓MB to download. It's also about half-an-hour's read on top of that.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/journald-experiments-0.html"&gt;Read more…&lt;/a&gt; (14 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>asciinema</category><category>code</category><category>experiments</category><category>journald</category><category>python</category><category>systemd</category><guid>http://milosophical.me/blog/2018/journald-experiments-0.html</guid><pubDate>Sat, 14 Jul 2018 11:32:16 GMT</pubDate></item><item><title>4-bit Rules of Computing, Part 4</title><link>http://milosophical.me/blog/2018/4-bits-part4.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Here is the fifth part of my &lt;a href="http://milosophical.me/tags/4-bit-rules.html"&gt;blog series&lt;/a&gt; expanding on my
&lt;a href="http://milosophical.me/pg/4-bit-rules.html"&gt;4-bit rules of computing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post: &lt;strong&gt;rules 7, 8, and 9&lt;/strong&gt;; which discuss &lt;strong&gt;testing and debugging&lt;/strong&gt;. They are all related in a way: having to do with making good-quality craft work. Because, as much as computer people like to &lt;em&gt;believe&lt;/em&gt; that we're "engineers" or that this is "computer science", &lt;a href="https://web.archive.org/web/20171221023913/https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/"&gt;we're not really&lt;/a&gt;.  We're crafts people, in a profession that's still very young and finding its roots and methods in order to be consistently successful.&lt;/p&gt;
&lt;p&gt;I'm definitely &lt;em&gt;not&lt;/em&gt; trying to pretend I'm an "engineer". 
For real &lt;em&gt;rigour&lt;/em&gt;, there is much more required than a few simple rules. But these are some realistic and humble rules in the area of testing that I aim to stick to.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/4-bits-part4.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>4-bit-rules</category><category>bugs</category><category>code</category><category>debugging</category><category>engineering</category><category>experiments</category><category>perfection</category><category>TDD</category><category>testing</category><category>tip</category><guid>http://milosophical.me/blog/2018/4-bits-part4.html</guid><pubDate>Fri, 23 Mar 2018 10:25:22 GMT</pubDate></item><item><title>Learning DVCS Workflow - 0</title><link>http://milosophical.me/blog/2018/learning-git-workflow-0.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;If you take look at the revision history for &lt;a href="https://github.com/sinewalker/dotfiles/commits/master"&gt;some of&lt;/a&gt; my &lt;a href="https://github.com/sinewalker/dotspacemacs/commits/master"&gt;projects&lt;/a&gt; on &lt;a href="https://github.com/sinewalker/sinewalker.github.io/commits/master"&gt;GitHub&lt;/a&gt;, you'll see that I have a fairly messy track-record!&lt;/p&gt;
&lt;p&gt;A few times I have successfully used &lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;'s ability to &lt;a href="https://magit.vc/manual/magit/Staging-and-Unstaging.html#Staging-and-Unstaging"&gt;interactively stage/unstage Hunks or parts of Hunks&lt;/a&gt;, to make my commits a bit more clean and sensible, but not always.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The real problem is&lt;/strong&gt;: I haven't been using Branches.  It's because I haven't studied how to use them effectively, and in the past they've been scary.&lt;/p&gt;
&lt;p&gt;But for the future, and especially for my dotfiles, I'd like to be able to read through the commits and make sense of them after. Also I'd like to be sure when I'm committing that I don't make any unplanned master changes and break things. &lt;/p&gt;
&lt;p&gt;I also tend to work by myself on these projects, but I'll often go on a tangent, or start a blog post and then put off finishing it while another, different idea is developed and maybe even published first.  Ideally I should be able to track these things separately.&lt;/p&gt;
&lt;p&gt;So I need to learn:  how to do revision control workflow with branches, &lt;strong&gt;properly&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/learning-git-workflow-0.html"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>git</category><category>magit</category><category>mercurial</category><category>subversion</category><guid>http://milosophical.me/blog/2018/learning-git-workflow-0.html</guid><pubDate>Sun, 18 Mar 2018 00:48:10 GMT</pubDate></item><item><title>4-bit Rules of Computing, Part 3</title><link>http://milosophical.me/blog/2018/4-bits-part3.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Here is the forth part of my &lt;a href="http://milosophical.me/tags/4-bit-rules.html"&gt;blog series&lt;/a&gt; expanding on my
&lt;a href="http://milosophical.me/pg/4-bit-rules.html"&gt;4-bit rules of computing&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2015/4-bit-rules-of-computing-part-2.html"&gt;Previously&lt;/a&gt; in &lt;em&gt;Milosophical Me&lt;/em&gt;: Mike was reflecting on Comments, both in source code and in social media, and had come to the conclusion that they are to be avoided, that they can be more harmful than helpful, and that source codes (and people) should be allowed to speak for them selves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is an exception to Rule 5 (&lt;em&gt;Rule 0&lt;/em&gt; allows for this): &lt;strong&gt;doc-comments&lt;/strong&gt;.   In this post I explore what they are, how they differ from regular comments, and how to use them to assist your fellow hackers.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2018/4-bits-part3.html"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>4-bit-rules</category><category>code</category><category>comments</category><category>literate</category><category>tip</category><guid>http://milosophical.me/blog/2018/4-bits-part3.html</guid><pubDate>Tue, 27 Feb 2018 20:44:51 GMT</pubDate></item><item><title>Help with Accelerologger</title><link>http://milosophical.me/blog/2017/accelerologger.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;One of the Huon kids over at &lt;a href="http://www.mrelliott.info/droneblog/"&gt;Bob's Drone Blog&lt;/a&gt; has a really cool Scientific Investigation Awards project - an Accelerometer data logger, or "Accelerologger" (I like the name too!). He's stuck with a small coding bug and has &lt;a href="http://www.mrelliott.info/droneblog/2017/07/27/accelerologger-accelerometer-datalogger-help-needed-with-code/"&gt;asked for help&lt;/a&gt;.  I think I see the problem. Wisely, Bob's disabled comments without a login (see my &lt;a href="http://milosophical.me/blog/2015/4-bit-rules-of-computing-part-2.html"&gt;Computing Rule 5&lt;/a&gt;), so I'm adding notes here on my own blog.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2017/accelerologger.html"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>arduino</category><category>children</category><category>code</category><category>hacking</category><category>hardware</category><category>tip</category><guid>http://milosophical.me/blog/2017/accelerologger.html</guid><pubDate>Thu, 27 Jul 2017 20:46:44 GMT</pubDate></item><item><title>Blogging with Emacs Org Mode</title><link>http://milosophical.me/blog/2011/12/15/blogging-with-emacs-org-mode.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;My blog is really in need of some love. One of the reasons I'm not posting very frequently (apart from just not having much to say or making time to say it) is that it is such a pain to write posts in WordPress' built in editor.  I briefly considered editing in a text editor and then cut/pasting, but usually there's a mess to clean up anyway, so it's not much fun either. &lt;/p&gt; 


&lt;p&gt;&lt;a href="http://milosophical.me/blog/2011/12/15/blogging-with-emacs-org-mode.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>blogging</category><category>code</category><category>emacs</category><category>hacking</category><category>org-mode</category><guid>http://milosophical.me/blog/2011/12/15/blogging-with-emacs-org-mode.html</guid><pubDate>Thu, 15 Dec 2011 10:53:00 GMT</pubDate></item><item><title>Using Emacs' EasyPG in text terminals</title><link>http://milosophical.me/blog/2011/03/17/using-emacs-easypg-in-text-terminals.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;There is a bug in the integration between Emacs' EasyPG and the "new" GnuPG2 that causes Emacs to not load &lt;code&gt;.gpg&lt;/code&gt; files when running in a text terminal.  It's being worked on, apparently, but in the mean-time, here is how to fix it.
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://milosophical.me/blog/2011/03/17/using-emacs-easypg-in-text-terminals.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>easypg</category><category>emacs</category><category>gnupg</category><category>hack</category><category>hacking</category><guid>http://milosophical.me/blog/2011/03/17/using-emacs-easypg-in-text-terminals.html</guid><pubDate>Thu, 17 Mar 2011 05:04:59 GMT</pubDate></item><item><title>NetBeans 6.5 and Python</title><link>http://milosophical.me/blog/2008/11/24/netbeans-65-and-python.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a title="NetBeans 6.5 release page" href="http://www.netbeans.org/community/releases/65/"&gt;NetBeans 6.5 is out&lt;/a&gt;! You can &lt;a title="Using Nimbus with NetBeans 6.5 -- noice!" href="http://mrhaki.blogspot.com/2008/11/start-netbeans-65-with-nimbus-look-and.html"&gt;run it with the&lt;/a&gt; &lt;a title="The Nimbus L&amp;amp;F project page" href="https://nimbus.dev.java.net/"&gt;Nimbus look and feel&lt;/a&gt; too! There's also an &lt;a title="NetBeans 6.5 Python -- Early Access" href="http://www.netbeans.org/features/python/index.html"&gt;Early Access plugin for Python&lt;/a&gt;. All very nice.
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
I recently had occasion to play with some Python at work (a small script to do some configurations, and I didn't want to do them in bash), so I took the time to get all of this set up. It's all so very easy and not worth writing about. However I thought that the i&lt;a title="NetBeans' integrated Jython debugger" href="http://wiki.netbeans.org/Python#section-Python-Debugger"&gt;nteractive debugger&lt;/a&gt; (which is &lt;em&gt;awesome&lt;/em&gt;, btw) has a small issue that needs resolving. Mean-time, here's a work-around.
&lt;/p&gt;


&lt;p&gt;&lt;a href="http://milosophical.me/blog/2008/11/24/netbeans-65-and-python.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>hacking</category><category>netbeans</category><category>python</category><category>tip</category><guid>http://milosophical.me/blog/2008/11/24/netbeans-65-and-python.html</guid><pubDate>Mon, 24 Nov 2008 01:08:42 GMT</pubDate></item><item><title>Stripping tags from ogg Vorbis files</title><link>http://milosophical.me/blog/2008/08/26/stripping-tags-from-ogg-vorbis-files.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;I have a bunch of free &lt;a title="Xiph's meta container format for media" href="http://www.xiph.org/ogg/"&gt;Ogg&lt;/a&gt; &lt;a title="Patent-free audio codec (MP3 killer)" href="http://www.vorbis.com/"&gt;Vorbis&lt;/a&gt; audio files that I've downloaded from &lt;a title="Kahvi Collective. Sound has the power to make the world a better place" href="http://kahvi.org/"&gt;Kahvi.org&lt;/a&gt;. They're great! But recently they've been including cover art within the files, which breaks Windows Media Player (it can't handle the very long tags of binhex-coded JPGs).
&lt;/p&gt;
&lt;p&gt;
Since I rather like WMP's integration in windows (keyboard shortcuts), and &lt;a title="Kewl KDE music player (iTunes killer)" href="http://amarok.kde.org/"&gt;Amarok&lt;/a&gt; &lt;a title="Amarok for win32 is still a work in progress, but it compiles..." href="http://amarok.kde.org/wiki/Development/Win32"&gt;isn't quite ready for win32&lt;/a&gt;, I thought I'd find a way to strip the troublesome tags from the data files rather than change to another player.
&lt;/p&gt;


Here's a quick-and-dirty shell hack to remove the tags from the files and get them playable by daft players such as Windows Media Player



&lt;p&gt;&lt;a href="http://milosophical.me/blog/2008/08/26/stripping-tags-from-ogg-vorbis-files.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>audio</category><category>code</category><category>cygwin</category><category>hacking</category><category>tip</category><category>vorbis</category><guid>http://milosophical.me/blog/2008/08/26/stripping-tags-from-ogg-vorbis-files.html</guid><pubDate>Tue, 26 Aug 2008 06:05:34 GMT</pubDate></item><item><title>Pretty-printing XML with Emacs' NXML-mode</title><link>http://milosophical.me/blog/2008/06/26/pretty-printing-xml-with-emacs-nxml-mode.html</link><dc:creator>Michael Lockhart</dc:creator><description>&lt;div&gt;&lt;p&gt;Did you ever get a stream of XML out of a log file, or in a data stream, and it's all mashed together without line-breaks so that it just appears as gobble-de-gook? If there's a data error (not an XML parsing error) then you have to read it so that you can find where the error is, but you don't have XML-spy and NetBeans is overkill or takes forever to fire up...
&lt;/p&gt;
&lt;p&gt;
Emacs to the rescue! &lt;a title="Benjamin Ferrari's blog (seems to lack an " href="http://blog.bookworm.at/"&gt;Benjamin Ferrari&lt;/a&gt; wrote this &lt;em&gt;increadibly useful&lt;/em&gt; (and simple) &lt;a title="Benjamin Ferrari's original blog post for below code" href="http://blog.bookworm.at/2007/03/pretty-print-xml-with-emacs.html"&gt;elisp function&lt;/a&gt; to pretty-print a block of XML code:
&lt;/p&gt;
&lt;p&gt;&lt;a href="http://milosophical.me/blog/2008/06/26/pretty-printing-xml-with-emacs-nxml-mode.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>code</category><category>emacs</category><category>geek</category><category>hacking</category><category>lisp</category><category>tip</category><category>XHTML</category><guid>http://milosophical.me/blog/2008/06/26/pretty-printing-xml-with-emacs-nxml-mode.html</guid><pubDate>Thu, 26 Jun 2008 02:46:03 GMT</pubDate></item></channel></rss>